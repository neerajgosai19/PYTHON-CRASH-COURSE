{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Final Project - Word Cloud"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For this project, you'll create a \"word cloud\" from a text by writing a script.  This script needs to process the text, remove punctuation, ignore case and words that do not contain all alphabets, count the frequencies, and ignore uninteresting or irrelevant words.  A dictionary is the output of the `calculate_frequencies` function.  The `wordcloud` module will then generate the image from your dictionary."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For the input text of your script, you will need to provide a file that contains text only.  For the text itself, you can copy and paste the contents of a website you like.  Or you can use a site like [Project Gutenberg](https://www.gutenberg.org/) to find books that are available online.  You could see what word clouds you can get from famous books, like a Shakespeare play or a novel by Jane Austen. Save this as a .txt file somewhere on your computer.\n",
    "<br><br>\n",
    "Now you will need to upload your input file here so that your script will be able to process it.  To do the upload, you will need an uploader widget.  Run the following cell to perform all the installs and imports for your word cloud script and uploader widget.  It may take a minute for all of this to run and there will be a lot of output messages. But, be patient. Once you get the following final line of output, the code is done executing. Then you can continue on with the rest of the instructions for this notebook.\n",
    "<br><br>\n",
    "**Enabling notebook extension fileupload/extension...**\n",
    "<br>\n",
    "**- Validating: <font color =green>OK</font>**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: wordcloud in /opt/conda/lib/python3.6/site-packages (1.8.1)\n",
      "Requirement already satisfied: matplotlib in /opt/conda/lib/python3.6/site-packages (from wordcloud) (3.0.3)\n",
      "Requirement already satisfied: pillow in /opt/conda/lib/python3.6/site-packages (from wordcloud) (5.4.1)\n",
      "Requirement already satisfied: numpy>=1.6.1 in /opt/conda/lib/python3.6/site-packages (from wordcloud) (1.15.4)\n",
      "Requirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.6/site-packages (from matplotlib->wordcloud) (0.10.0)\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.6/site-packages (from matplotlib->wordcloud) (1.0.1)\n",
      "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /opt/conda/lib/python3.6/site-packages (from matplotlib->wordcloud) (2.3.1)\n",
      "Requirement already satisfied: python-dateutil>=2.1 in /opt/conda/lib/python3.6/site-packages (from matplotlib->wordcloud) (2.8.0)\n",
      "Requirement already satisfied: six in /opt/conda/lib/python3.6/site-packages (from cycler>=0.10->matplotlib->wordcloud) (1.12.0)\n",
      "Requirement already satisfied: setuptools in /opt/conda/lib/python3.6/site-packages (from kiwisolver>=1.0.1->matplotlib->wordcloud) (40.8.0)\n",
      "Requirement already satisfied: fileupload in /opt/conda/lib/python3.6/site-packages (0.1.5)\n",
      "Requirement already satisfied: ipywidgets>=5.1 in /opt/conda/lib/python3.6/site-packages (from fileupload) (7.4.2)\n",
      "Requirement already satisfied: traitlets>=4.2 in /opt/conda/lib/python3.6/site-packages (from fileupload) (4.3.2)\n",
      "Requirement already satisfied: notebook>=4.2 in /opt/conda/lib/python3.6/site-packages (from fileupload) (5.7.5)\n",
      "Requirement already satisfied: widgetsnbextension~=3.4.0 in /opt/conda/lib/python3.6/site-packages (from ipywidgets>=5.1->fileupload) (3.4.2)\n",
      "Requirement already satisfied: ipykernel>=4.5.1 in /opt/conda/lib/python3.6/site-packages (from ipywidgets>=5.1->fileupload) (5.1.0)\n",
      "Requirement already satisfied: ipython>=4.0.0; python_version >= \"3.3\" in /opt/conda/lib/python3.6/site-packages (from ipywidgets>=5.1->fileupload) (7.4.0)\n",
      "Requirement already satisfied: nbformat>=4.2.0 in /opt/conda/lib/python3.6/site-packages (from ipywidgets>=5.1->fileupload) (4.4.0)\n",
      "Requirement already satisfied: ipython_genutils in /opt/conda/lib/python3.6/site-packages (from traitlets>=4.2->fileupload) (0.2.0)\n",
      "Requirement already satisfied: six in /opt/conda/lib/python3.6/site-packages (from traitlets>=4.2->fileupload) (1.12.0)\n",
      "Requirement already satisfied: decorator in /opt/conda/lib/python3.6/site-packages (from traitlets>=4.2->fileupload) (4.3.2)\n",
      "Requirement already satisfied: pyzmq>=17 in /opt/conda/lib/python3.6/site-packages (from notebook>=4.2->fileupload) (18.0.1)\n",
      "Requirement already satisfied: terminado>=0.8.1 in /opt/conda/lib/python3.6/site-packages (from notebook>=4.2->fileupload) (0.8.1)\n",
      "Requirement already satisfied: nbconvert in /opt/conda/lib/python3.6/site-packages (from notebook>=4.2->fileupload) (5.4.1)\n",
      "Requirement already satisfied: tornado<7,>=4.1 in /opt/conda/lib/python3.6/site-packages (from notebook>=4.2->fileupload) (6.0.2)\n",
      "Requirement already satisfied: jupyter-core>=4.4.0 in /opt/conda/lib/python3.6/site-packages (from notebook>=4.2->fileupload) (4.4.0)\n",
      "Requirement already satisfied: jinja2 in /opt/conda/lib/python3.6/site-packages (from notebook>=4.2->fileupload) (2.10)\n",
      "Requirement already satisfied: Send2Trash in /opt/conda/lib/python3.6/site-packages (from notebook>=4.2->fileupload) (1.5.0)\n",
      "Requirement already satisfied: prometheus-client in /opt/conda/lib/python3.6/site-packages (from notebook>=4.2->fileupload) (0.6.0)\n",
      "Requirement already satisfied: jupyter-client>=5.2.0 in /opt/conda/lib/python3.6/site-packages (from notebook>=4.2->fileupload) (5.2.4)\n",
      "Requirement already satisfied: setuptools>=18.5 in /opt/conda/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=5.1->fileupload) (40.8.0)\n",
      "Requirement already satisfied: jedi>=0.10 in /opt/conda/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=5.1->fileupload) (0.13.3)\n",
      "Requirement already satisfied: pickleshare in /opt/conda/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=5.1->fileupload) (0.7.5)\n",
      "Requirement already satisfied: prompt_toolkit<2.1.0,>=2.0.0 in /opt/conda/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=5.1->fileupload) (2.0.9)\n",
      "Requirement already satisfied: pygments in /opt/conda/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=5.1->fileupload) (2.3.1)\n",
      "Requirement already satisfied: backcall in /opt/conda/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=5.1->fileupload) (0.1.0)\n",
      "Requirement already satisfied: pexpect in /opt/conda/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=5.1->fileupload) (4.6.0)\n",
      "Requirement already satisfied: jsonschema!=2.5.0,>=2.4 in /opt/conda/lib/python3.6/site-packages (from nbformat>=4.2.0->ipywidgets>=5.1->fileupload) (3.0.1)\n",
      "Requirement already satisfied: mistune>=0.8.1 in /opt/conda/lib/python3.6/site-packages (from nbconvert->notebook>=4.2->fileupload) (0.8.4)\n",
      "Requirement already satisfied: entrypoints>=0.2.2 in /opt/conda/lib/python3.6/site-packages (from nbconvert->notebook>=4.2->fileupload) (0.3)\n",
      "Requirement already satisfied: bleach in /opt/conda/lib/python3.6/site-packages (from nbconvert->notebook>=4.2->fileupload) (3.1.0)\n",
      "Requirement already satisfied: pandocfilters>=1.4.1 in /opt/conda/lib/python3.6/site-packages (from nbconvert->notebook>=4.2->fileupload) (1.4.2)\n",
      "Requirement already satisfied: testpath in /opt/conda/lib/python3.6/site-packages (from nbconvert->notebook>=4.2->fileupload) (0.4.2)\n",
      "Requirement already satisfied: defusedxml in /opt/conda/lib/python3.6/site-packages (from nbconvert->notebook>=4.2->fileupload) (0.5.0)\n",
      "Requirement already satisfied: MarkupSafe>=0.23 in /opt/conda/lib/python3.6/site-packages (from jinja2->notebook>=4.2->fileupload) (1.1.1)\n",
      "Requirement already satisfied: python-dateutil>=2.1 in /opt/conda/lib/python3.6/site-packages (from jupyter-client>=5.2.0->notebook>=4.2->fileupload) (2.8.0)\n",
      "Requirement already satisfied: parso>=0.3.0 in /opt/conda/lib/python3.6/site-packages (from jedi>=0.10->ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=5.1->fileupload) (0.3.4)\n",
      "Requirement already satisfied: wcwidth in /opt/conda/lib/python3.6/site-packages (from prompt_toolkit<2.1.0,>=2.0.0->ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=5.1->fileupload) (0.1.7)\n",
      "Requirement already satisfied: ptyprocess>=0.5 in /opt/conda/lib/python3.6/site-packages (from pexpect->ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=5.1->fileupload) (0.6.0)\n",
      "Requirement already satisfied: attrs>=17.4.0 in /opt/conda/lib/python3.6/site-packages (from jsonschema!=2.5.0,>=2.4->nbformat>=4.2.0->ipywidgets>=5.1->fileupload) (19.1.0)\n",
      "Requirement already satisfied: pyrsistent>=0.14.0 in /opt/conda/lib/python3.6/site-packages (from jsonschema!=2.5.0,>=2.4->nbformat>=4.2.0->ipywidgets>=5.1->fileupload) (0.14.11)\n",
      "Requirement already satisfied: webencodings in /opt/conda/lib/python3.6/site-packages (from bleach->nbconvert->notebook>=4.2->fileupload) (0.5.1)\n",
      "Requirement already satisfied: ipywidgets in /opt/conda/lib/python3.6/site-packages (7.4.2)\n",
      "Requirement already satisfied: nbformat>=4.2.0 in /opt/conda/lib/python3.6/site-packages (from ipywidgets) (4.4.0)\n",
      "Requirement already satisfied: ipykernel>=4.5.1 in /opt/conda/lib/python3.6/site-packages (from ipywidgets) (5.1.0)\n",
      "Requirement already satisfied: ipython>=4.0.0; python_version >= \"3.3\" in /opt/conda/lib/python3.6/site-packages (from ipywidgets) (7.4.0)\n",
      "Requirement already satisfied: widgetsnbextension~=3.4.0 in /opt/conda/lib/python3.6/site-packages (from ipywidgets) (3.4.2)\n",
      "Requirement already satisfied: traitlets>=4.3.1 in /opt/conda/lib/python3.6/site-packages (from ipywidgets) (4.3.2)\n",
      "Requirement already satisfied: ipython_genutils in /opt/conda/lib/python3.6/site-packages (from nbformat>=4.2.0->ipywidgets) (0.2.0)\n",
      "Requirement already satisfied: jsonschema!=2.5.0,>=2.4 in /opt/conda/lib/python3.6/site-packages (from nbformat>=4.2.0->ipywidgets) (3.0.1)\n",
      "Requirement already satisfied: jupyter_core in /opt/conda/lib/python3.6/site-packages (from nbformat>=4.2.0->ipywidgets) (4.4.0)\n",
      "Requirement already satisfied: jupyter-client in /opt/conda/lib/python3.6/site-packages (from ipykernel>=4.5.1->ipywidgets) (5.2.4)\n",
      "Requirement already satisfied: tornado>=4.2 in /opt/conda/lib/python3.6/site-packages (from ipykernel>=4.5.1->ipywidgets) (6.0.2)\n",
      "Requirement already satisfied: setuptools>=18.5 in /opt/conda/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets) (40.8.0)\n",
      "Requirement already satisfied: jedi>=0.10 in /opt/conda/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets) (0.13.3)\n",
      "Requirement already satisfied: decorator in /opt/conda/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets) (4.3.2)\n",
      "Requirement already satisfied: pickleshare in /opt/conda/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets) (0.7.5)\n",
      "Requirement already satisfied: prompt_toolkit<2.1.0,>=2.0.0 in /opt/conda/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets) (2.0.9)\n",
      "Requirement already satisfied: pygments in /opt/conda/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets) (2.3.1)\n",
      "Requirement already satisfied: backcall in /opt/conda/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets) (0.1.0)\n",
      "Requirement already satisfied: pexpect in /opt/conda/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets) (4.6.0)\n",
      "Requirement already satisfied: notebook>=4.4.1 in /opt/conda/lib/python3.6/site-packages (from widgetsnbextension~=3.4.0->ipywidgets) (5.7.5)\n",
      "Requirement already satisfied: six in /opt/conda/lib/python3.6/site-packages (from traitlets>=4.3.1->ipywidgets) (1.12.0)\n",
      "Requirement already satisfied: attrs>=17.4.0 in /opt/conda/lib/python3.6/site-packages (from jsonschema!=2.5.0,>=2.4->nbformat>=4.2.0->ipywidgets) (19.1.0)\n",
      "Requirement already satisfied: pyrsistent>=0.14.0 in /opt/conda/lib/python3.6/site-packages (from jsonschema!=2.5.0,>=2.4->nbformat>=4.2.0->ipywidgets) (0.14.11)\n",
      "Requirement already satisfied: pyzmq>=13 in /opt/conda/lib/python3.6/site-packages (from jupyter-client->ipykernel>=4.5.1->ipywidgets) (18.0.1)\n",
      "Requirement already satisfied: python-dateutil>=2.1 in /opt/conda/lib/python3.6/site-packages (from jupyter-client->ipykernel>=4.5.1->ipywidgets) (2.8.0)\n",
      "Requirement already satisfied: parso>=0.3.0 in /opt/conda/lib/python3.6/site-packages (from jedi>=0.10->ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets) (0.3.4)\n",
      "Requirement already satisfied: wcwidth in /opt/conda/lib/python3.6/site-packages (from prompt_toolkit<2.1.0,>=2.0.0->ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets) (0.1.7)\n",
      "Requirement already satisfied: ptyprocess>=0.5 in /opt/conda/lib/python3.6/site-packages (from pexpect->ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets) (0.6.0)\n",
      "Requirement already satisfied: Send2Trash in /opt/conda/lib/python3.6/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.4.0->ipywidgets) (1.5.0)\n",
      "Requirement already satisfied: nbconvert in /opt/conda/lib/python3.6/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.4.0->ipywidgets) (5.4.1)\n",
      "Requirement already satisfied: prometheus-client in /opt/conda/lib/python3.6/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.4.0->ipywidgets) (0.6.0)\n",
      "Requirement already satisfied: jinja2 in /opt/conda/lib/python3.6/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.4.0->ipywidgets) (2.10)\n",
      "Requirement already satisfied: terminado>=0.8.1 in /opt/conda/lib/python3.6/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.4.0->ipywidgets) (0.8.1)\n",
      "Requirement already satisfied: mistune>=0.8.1 in /opt/conda/lib/python3.6/site-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.4.0->ipywidgets) (0.8.4)\n",
      "Requirement already satisfied: entrypoints>=0.2.2 in /opt/conda/lib/python3.6/site-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.4.0->ipywidgets) (0.3)\n",
      "Requirement already satisfied: bleach in /opt/conda/lib/python3.6/site-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.4.0->ipywidgets) (3.1.0)\n",
      "Requirement already satisfied: pandocfilters>=1.4.1 in /opt/conda/lib/python3.6/site-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.4.0->ipywidgets) (1.4.2)\n",
      "Requirement already satisfied: testpath in /opt/conda/lib/python3.6/site-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.4.0->ipywidgets) (0.4.2)\n",
      "Requirement already satisfied: defusedxml in /opt/conda/lib/python3.6/site-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.4.0->ipywidgets) (0.5.0)\n",
      "Requirement already satisfied: MarkupSafe>=0.23 in /opt/conda/lib/python3.6/site-packages (from jinja2->notebook>=4.4.1->widgetsnbextension~=3.4.0->ipywidgets) (1.1.1)\n",
      "Requirement already satisfied: webencodings in /opt/conda/lib/python3.6/site-packages (from bleach->nbconvert->notebook>=4.4.1->widgetsnbextension~=3.4.0->ipywidgets) (0.5.1)\n",
      "Installing /opt/conda/lib/python3.6/site-packages/fileupload/static -> fileupload\n",
      "Up to date: /home/jovyan/.local/share/jupyter/nbextensions/fileupload/extension.js\n",
      "Up to date: /home/jovyan/.local/share/jupyter/nbextensions/fileupload/widget.js\n",
      "Up to date: /home/jovyan/.local/share/jupyter/nbextensions/fileupload/fileupload/widget.js\n",
      "- Validating: \u001b[32mOK\u001b[0m\n",
      "\n",
      "    To initialize this nbextension in the browser every time the notebook (or other app) loads:\n",
      "    \n",
      "          jupyter nbextension enable fileupload --user --py\n",
      "    \n",
      "Enabling notebook extension fileupload/extension...\n",
      "      - Validating: \u001b[32mOK\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "# Here are all the installs and imports you will need for your word cloud script and uploader widget\n",
    "\n",
    "!pip install wordcloud\n",
    "!pip install fileupload\n",
    "!pip install ipywidgets\n",
    "!jupyter nbextension install --py --user fileupload\n",
    "!jupyter nbextension enable --py fileupload\n",
    "\n",
    "import wordcloud\n",
    "import numpy as np\n",
    "from matplotlib import pyplot as plt\n",
    "from IPython.display import display\n",
    "import fileupload\n",
    "import io\n",
    "import sys"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Whew! That was a lot. All of the installs and imports for your word cloud script and uploader widget have been completed. \n",
    "<br><br>\n",
    "**IMPORTANT!** If this was your first time running the above cell containing the installs and imports, you will need save this notebook now. Then under the File menu above,  select Close and Halt. When the notebook has completely shut down, reopen it. This is the only way the necessary changes will take affect.\n",
    "<br><br>\n",
    "To upload your text file, run the following cell that contains all the code for a custom uploader widget. Once you run this cell, a \"Browse\" button should appear below it. Click this button and navigate the window to locate your saved text file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "bec4fff57cc04f968564c63b07c41726",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "FileUploadWidget(label='Browse', _dom_classes=('widget_item', 'btn-group'))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Uploaded `SAMPLE.txt` (592.33 kB)\n"
     ]
    }
   ],
   "source": [
    "# This is the uploader widget\n",
    "\n",
    "def _upload():\n",
    "\n",
    "    _upload_widget = fileupload.FileUploadWidget()\n",
    "\n",
    "    def _cb(change):\n",
    "        global file_contents\n",
    "        decoded = io.StringIO(change['owner'].data.decode('utf-8'))\n",
    "        filename = change['owner'].filename\n",
    "        print('Uploaded `{}` ({:.2f} kB)'.format(\n",
    "            filename, len(decoded.read()) / 2 **10))\n",
    "        file_contents = decoded.getvalue()\n",
    "\n",
    "    _upload_widget.observe(_cb, names='data')\n",
    "    display(_upload_widget)\n",
    "\n",
    "_upload()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The uploader widget saved the contents of your uploaded file into a string object named *file_contents* that your word cloud script can process. This was a lot of preliminary work, but you are now ready to begin your script. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Write a function in the cell below that iterates through the words in *file_contents*, removes punctuation, and counts the frequency of each word.  Oh, and be sure to make it ignore word case, words that do not contain all alphabets and boring words like \"and\" or \"the\".  Then use it in the `generate_from_frequencies` function to generate your very own word cloud!\n",
    "<br><br>\n",
    "**Hint:** Try storing the results of your iteration in a dictionary before passing them into wordcloud via the `generate_from_frequencies` function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "def calculate_frequencies(file_contents):\n",
    "    # Here is a list of punctuations and uninteresting words you can use to process your text\n",
    "    punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n",
    "    uninteresting_words = [\"the\", \"a\", \"to\", \"if\", \"is\", \"it\", \"of\", \"and\", \"or\", \"an\", \"as\", \"i\", \"me\", \"my\", \\\n",
    "    \"we\", \"our\", \"ours\", \"you\", \"your\", \"yours\", \"he\", \"she\", \"him\", \"his\", \"her\", \"hers\", \"its\", \"they\", \"them\", \\\n",
    "    \"their\", \"what\", \"which\", \"who\", \"whom\", \"this\", \"that\", \"am\", \"are\", \"was\", \"were\", \"be\", \"been\", \"being\", \\\n",
    "    \"have\", \"has\", \"had\", \"do\", \"does\", \"did\", \"but\", \"at\", \"by\", \"with\", \"from\", \"here\", \"when\", \"where\", \"how\", \\\n",
    "    \"all\", \"any\", \"both\", \"each\", \"few\", \"more\", \"some\", \"such\", \"no\", \"nor\", \"too\", \"very\", \"can\", \"will\", \"just\"]\n",
    "    \n",
    "    # LEARNER CODE START HERE\n",
    "    result={}\n",
    "    a=file_contents.lower()\n",
    "    a=file_contents.split(\" \")\n",
    "    #a=file_contents.lower()\n",
    "    for word in a:\n",
    "        word = word.lower()\n",
    "        if word in uninteresting_words:\n",
    "            pass\n",
    "        else:\n",
    "            for letter in word:\n",
    "                if letter in punctuations:\n",
    "                    letter.replace(punctuations,\"\")\n",
    "            if word not in result.keys():\n",
    "                result[word]=0\n",
    "            else:\n",
    "                result[word]+=1\n",
    "    \n",
    "    #wordcloud\n",
    "    cloud = wordcloud.WordCloud()\n",
    "    cloud.generate_from_frequencies(result)\n",
    "    return cloud.to_array()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you have done everything correctly, your word cloud image should appear after running the cell below.  Fingers crossed!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYEAAADKCAYAAABDsfw/AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAIABJREFUeJzsnXeYHNWVt9/qnHume3KOGuUsJAQSUSAJgwEDJtlgbJzT2gbb67V317us7XX2OgeSwSYHkQUSoAzKaaSRNDlPh+mcu+v7ozTd09M9UQLLH/N7Hj3qunXurVs1VffckwVRFJnGNKYxjWl8MCH7R09gGtOYxjSm8Y/DNBOYxjSmMY0PMKaZwDSmMY1pfIAxzQSmMY1pTOMDjGkmMI1pTGMaH2BMM4FpTGMa0/gAY5oJTGMa05jGBxjTTGAa05jGND7AmGYC05jGNKbxAYbiHz0BAEEQpsOWpzGNaUxjkhBFUTjTMc4JJjCNfy4IMhlL7vgxAHse+Ho2CmZe9QVUeguNG35GLOR7fyc4jfcNuroixGgcVVEO7ndOYl5eTzwQRozF0c8oYXDbMTSlVuL+EDK1ErlJh3vXCXJWNuDa0fSPnv40mFYHTeM9gFylwVBQjUpvRpdb/I+ezj8tdJYStGf4/PTmEhoWfRS9uQStIR9jbgVmaw2FFcsw5Vae8RyDrQME222oi3MBUJfkoso34T/WDUDRTSvxHmond/VsdPXFgIhhbgWCfHrpGYlVX1tEToXxfb/uP4UkoJObqDQswKIqQ6cwIUOON2bHFRlgINSCI9KFKCYy+qnlepZarkGrMCJDTijuxR7upNH99j/gLj44iEeCo0gI05gMZl/zNewn36Vt+xNTHsPv7sHn7sHv7qG0dhUgEA37GOw/TiTsPeM5inHpuxt47l0QBAaefTd5buD53cnf3Q+8CYCm3IpxQRW2F/eOO7a1dgnmkgYUaj3m0pkA7H/se8TC/inNdcaaT2MuacB2YidtO59KPykIVH75Htp/+b8Z/SwXX47CnIt71zasa9Zhe/l55AYjxgWLsb3wDEprPvnrrqbnkfspLl/OQM9+rAWzCPhtFJedR2/XuxhMpQD0de3OGH8I1atLaNzQkjy+6JtLMBXr2P2XRvoOO6Z0zxPBPwUTuKDgVuRC+lRNygJMygLK9bN5q/8hwvH0F6NAU82C3CuQC8pkm06RQ4UiB3e0n+7A8fdl7tOYxpQhnLG6F4Dulq3S/81bz8p4o2ICGYkT4Ri2l/ZNaDhH814czRKzWHbHT89oauNCFBl47kkKb7gV20vPgihScPVHiAcDJMJhAOKhIIlYjHgggLa6Dm1lNUU3fxyAyEA/AEqlFrXGjM5QiFJlIB6PotFapE2qKCKTK0nEo1mn0HvQnjoQoGxpAY/e+Mp7e9+cg0xAWWQl2pfO9eSCAke4ixOeHfhigySIk6+upFBTg4iYwQDMygIW5q5FJsh51/EsrkgfIiJGhZVa41Lm5VxOJBHEFmqf0hzz6s8jp3Iuems5Co0BMR6l78hb9B15i0QskkYrkytY/PEfMdh2iOY3H6LusrswFFQhU6qJ+l04Ww/Qve+VrPS9hzZRsvCKNPrDT/8gYz7FC9ZgqV6A2mhFFBMEHD00vfKbDLqln/gpfYc203PoDUoWrCG3aj5ylRZffys9B14j4OjO6KPUGilZvJacstnEoyEcp/bQd+QtxEQCQZYp0i+67T7kKk3y+PCT9xH2ObM+R7lSQ/7M87FUL0RlyEWmUOHrb8XVcRRH817ikeCY9PFomLDHPio9CFjrllKx4loEmZywx46zZT/9R7ekfYhLPv4j+hu3klMxB6XWxMCxbXTve4WcijlUr74V+4l36Hx3Q9ax8xuWo80tRpDJ6T3wesbY+rxyZl391bTnXjhnNfFoOOtzNxbVUDjnInQWaeeYN2M5eTOWp135n1nKigy4/9FTGBXB9lZURcWYl64g5vEQcdhxbn4N65r1GbQRWz/hnm76n3ksrb2j9W0QRdpObgQEQEQQZFk1FWNChM337WbN91ew5Sf7CHsi4/eZIs45JhB3pYuoSpm0oDT79uCODiTbB0KtDIRas44xy7wKmSDHF3PgDKc+ME/Uxn7nK6wt+SKzzRezJfRXVnx2Fn5bkK69NsrPK2DguAtzqR6VToGj2UNevRm9VcOO3x9NjlN14UcBCPuc+AZakSvVlCy6EmNxPU2v/BbI3BEpdUaMRbXo88oJDPagUGnR5haj0Oiz3oNSZ2TmVV8kHg6m0WfQaY2ULl5LPBLEb+tAkCswFFRSdcFNtG1/MmMuurwyGtZ+Dr21jICzG7lKQ07FHEylMzj2wi8JDvamjT3zQ19GbbAQjwSJBj2ULl6HvqCSRCyMXKXNmE/nu8+js5SQ33A+gnzs12vW1V9BYy4gFvYTHOxDEARMJTMwFtXibD2QRitXajLo1UbrqPSCIKP6otuwVC/Eb+tAFBPocospXbKe3Kr5NG74efpzsZQQj4RQGXIpXnA5Ef8g5cuuQQQK51yEr7+VwfbDSfqai2/HUr2QRCxCcLAPUUwkx2565bfEo+FRn7u3vwVtblHW5y7IFMRCfjw9J8ibsZyQewBff/b3fBpnD3KdnsIbbgXA/srzJKJRclZcgDInh5g3U20W6mhDX99A8S13AOA/cQzP3ndHSEPS70kzgNPoPWAnrz6HOdfVsO+h905zcc4wAU1DJYJSQfBoS1p7NBECoEI3F3ekj7gYG3McncJMjkpaLFu8o4udWrmRPE05Ylzk0NMtFM2x4B8IUbYoD7lKzq4/NbLkthnsffQE531iZlrfrr0vMdh6gLA3tcNddPt9GItqMBbX4u09lXl/pnyqV9/Gwce/z9DLodDokSvU2Z+HKZ/Od57D1vROGv1IVF34UZyt+2nb9kRSClHpzcy/6XsEnD0MHNuWRm8qmUEs5KPxhZ8TcHQjU6qpu/ROTCUzKF5wOS1v/TVJW7bsatQGC96+Zk69cT/xaAidtYyGtZ/NygAA7CclnbCldjGKcZiAxlyAu/MYpzY/gJiIJ+9bm1uU4VFkrV0yKfrCeRdjqV6Ip7uJExv/KD0/tZ7aS+/AWFSbMRdTaQN7Hvg6efXLqLrwZirO/wgdu54lFvRSe+mdmMtmpTGBobFbtjxKLCRJog3rPo+xqJayZdfQvuPJKT13T88JPD0nAEkK8PW3npFNYBoTQzzgp+fhPyWPBbmMzj/8KoOu77GHk78dm147a9fXmNUUL8hjuXYuHbv6aN7cxZrvSxLg1p+lNjgf+tkqXvza2VXrnTNMIO4NoK4uyapX3Ot8kRnG81lT/Nlk23H3VjoDjcTFdP1agaYm+bsvlLkYA/hjg+gVuRRp6tj1p00S7VEngkxATKSuv/fREwgygXcfSOfCfYc2Z4zZd2gzpUvWYyquy8oEFBoDx178JcN35rGQnxjZjVwKjQFb0660tqHFZgjFC9ZgLpuVoR6I+N2EXP1UrLiO4GAv3r7m1ElR5NCT9yUZRiIapvnNh1l023+TWzU/SWYum4m1dgkhj+20dCMh4Oii6ZXfMfvDX8s678lCX1BJTsVcBtsPgSgS8tgIeWwZdGGvY8L0puJ6ypZchW+gNckAAGJhP02v/I7FH/8hhoJqfAOtaecA7Kf2UHXhR4n4XdiO70Aml2xKw6UwU3F9xthAcuz8hhU4Tu1JG3+iz30yuPu/KnjjMTszFuqRKwXiMZH+jjCX3GDl51/OLj3MvFJiVE2v/yHJbBqu+Bym4joAWrc/hv2UZLysWXUr1polNG95BGfrfgAKGlZSsfw6BEFSBSZiYWSnNzJ+RxcnN/2ZaDB957z09h8hyBXsfihTjdVwxWcxFdczcHw77e88M6XnMBLD7QfxaBi5QoW3v4VIIKWKylszD+IJooN+EEBMgHFWCQBRTxCFQUPMG0Rp1hH1BAmc6kNTkYfCqMH59jG0lXmICdCW5aIuzsW+6QiBloGMuUwUIXeYh699Ka1tw5e3ZNCdbQYA5xITcHsJ7Msu8thCbdhCbVjUZZRqZ1KkrWWmeRXVxiUcHnwDe7hjGPXE487EEbTDGcBYbWqjBWvdMgyF1agNFuQqLQr10M54dGNe2HN2Lfwac/6o54LuATQ5hWhzitKYQCTgybBbiKd12EMfNoDaYAUg7LEzEqPp+CcLW9NO8hvOp/aSjxPxD+I4uYfu/a9mpXV3H8+gP/7Sr4n4XRm0mpxCAAwF1Sz9RHaDokKtSztOqm9EEVEUSSTVOdLff7j9Q5NTOObY2caf6HOfDKLhBLGoSDiUwJqrwt4dJhoWefZ3faP28Ts6MRbVosstSTIBQ34FAWc3OksphvzKJBMYsksEHJ0A5JTNonLF9YDAQNMOeg+9QSTgxlzSQOWK69Fby6i75BMcf/U3SUltKjAX1qM2WBhoGaleGR+GfMntdbD9EB3vPkck4EYmV7Lo5u9jlKc2iMQTCHIZxvkV2F47hHlhJWG7N8kYFDOKURg1yTZfUy+aUgtiNE7MFybU48K8sJKI048ogkwlLaW/+L2FNetTNrHPfNzBtrfSVYMARztKxqV5v3DOMIGEPzQujTPchTPcRaP7LVYV3I5GbmChZS3bB/5OMC7tPsLxQJJeLdMTjHsyxlHLJLVKJBHIODcRzL3+WwgyOUFXP97eU0QCbvR55ZjLZo3ZLx4dabg8M8iV2VVJQHLBkY2gScQm9rLJFMq0cbKNfaZo3/EUzpb9FM+/DFPpDIoXrkGpM9G150Vi4cy/zUj6eTd8B8ep3Rn0Q4bpiN9N0NmT9drRkQFsIxabsWpvy1WaMcfONv5En/tUseVZBzd8qZiBzjDNhwNwLMiNXy7myV/1ptH57dKCPlyykSlUOFv3ozJY0OdXASDI5GjMBcQjQUKnNy/lyz4MCDha9tK+6+lkf3dPE8df+z3zrr0XQ34lebVLsZ18Z+o3Iwi4+05OmgEAFM+7lKCrn+a3/5rUxSfiUTrefY6qlTelCGUCg++cIuYNSZ5Br7nTrufe3yZ5Zw2fg0wAEWRqBeE+V0YfgO/e4+KXP5axZp2Gr9xrGnWeH7pkYFya9wvnDBOYDOJijF32J1lV8DEUgooCTTXt/kMADEZSL71FXUJ3IJMJKGSq07Sj75hGg9poRZDJadv2eFL/DVC6eO24TOBsIx4ZnXEOMYh4dHzmmg2JmLRLHVKHDIdsHF3/ZODta8bb14zaaCW/4XyK5l2CvqCKxg0/Q4xn2n+G08++5mvkzVieQT/EpPy2dprffOiszXUIiVjkPRt7Mnjwv7sA6DwhbS5+96125ApJLQRwaFvmu+93SH1GBvH5Hd0EHJ0Yi+qQKdRoTHkIguw0vTSexiRJnn1H3swYN+IfxNl6gLz688irO++MmIBcoSK/agldjW9MihEIggxTyUy697+SYYx1tOyjYvn1yXfX/saR9M7ZrjOibSJ9vN4EXm+CtpaxJaHW5lgGjUFhQSlTo1PkYA93EE2ESIhTl6gminM+bE8YRb0SivuJi9LHLhdUw9q9SfVQtWHJqOOG4n4c4c5Jz8dcOhO/rSONAQCoDJZJj3WmCLr6Rz2nMRcAEBqDZiwMqXzURmvGOaU+Z0pjjnk9r4OuPS8Scg+gzSnEUrVgXPrDT/8gK/3Qc9HmFp31eQ6N/16NfaYYYgAATfsy7U1hr51YJIg2pyhNDRVwduO3dyEIMgz55UlVkN+R/o0kYmECg9k3T16bZIfQ55Wf0T0IMgWDPUcnLQloTPnI5IqktDMciXiUcBZb07mCAk01arkemaBAIzdQoKmm2rAYxbC17b3COS8JFGprWZi7dtTzJ727aPHtSWvb49iARVXKIss61pZ8MaNPo/stOvxHMtongrDfidpoRaHRJw21cqUaa+3oDOe9Qt/hzegsJdRc/DHatj2e5h2kMRfQtfuFdKPwJODuOoazZT+WmkU0rP0cpzbdTzwaRptTyIy1nzsr8zcUVuPrbyObHWekBGOtW0bYa0+jl8nkWek93U107n6B8mVXM++G73D4qfuGjSRgLKrG25fuhTYZeLqb0JgLmHfDdzi16f5hbrXS2EqtKcNldarIrZpPz4GNWW0fU4XtxC6K515CbuV8fLY2nK37iYX99B/bSvG8SymctRq5UlKpDTTtSOsbDfkZze4WO20QFob9XcZDtliTkHcAY34N/sHeUa+VDUPec9FQ9kjoaNCb4Wb9wGNW7LYE93xpEIB3Got54ZkA//1vkhH52Y35XHeFDUGAX//FwooL1Dz6oPTd336XnkP7Itx1i4PE1LxAkxhydxcQprQ5PROc80zAHurAFmrHoMxFJdMhE+QkxDi9wRN0Bo7ijmTf6Toj3WwdeIRl1uvQKUyAQDjuwxHumjIDAGkBUGj0zL3uXjy9p5Ar1ejzKug5sJGShVdMedypon3nUyy67T7MpQ0EHN0Icjn6vAoczfvoO3pm6TE6d2/AUFiFsbiO+Td9l5Dbhs5axmDbAfT5VaiN6dJPbuU81KY8VPqcpOtryeK1RANuIn43thO70lQ8M9d/kXgkSNjnJBbyo1DrJDfQruO4OhrTxrbWLMJU2pBGbyyqQ5DJstL3H3kbjdFK/syVzP7w14kFvSi0RtSGXOQq7RkHXNmO7yB/5krmXPt1As5eYkEv+vwK5CotjuZ9Z4UJ+G3t6PMrmXvdvfgdXYiJOAqNnsbnf3ZG4w4ZerU5hSTiMXy2NgCiQQ8Rvwt9XjmCTE4s7CfiG0zrq9QYGAqCGgmlVtJvT8YorFBnuj1rjAUo1Yas1xgLQ3ahbGMCWd2aG49EWblaelflCnjpuQDzF0m7b4VCoLpWWiIvW6vh4ss1fPWzTl5/WdpwDPTF+fZ/mrn4cg2bN05N7TocucoiPDE7SpmGaCIMiJgUeegUZuzhLsKJqaXLGA/nPBOIiRH2Ol+YUt9IIsR229/P6nzERIKBxq2Yy2eTWzmPWDiAp/ck/Ue3ULJwzVm91kQQj4To2vMi1tol6AuqEBMx/LZ2Wrf8jcl+RCMRDXg49sIvKV28DnP5bOQqDd17X6L/6BbqLrsrgwkUzbsUfX5FWttwCcnZup/YMCYw2HYInbUUjbkAWa6CeDRMx85nsJ3YmTH3viNvEY+G0+h9tjaczfuz0oNI+86ncXUcpXr1LWhzComFA4S9DjzdJ87ouQDJsfNnrsRQUIk2p5DgYC+e7hM4mveMP8AEcGLjnyhbsh5z+RwMBdUk4lEiZ8Eza0hdojHlI4oi7q4UA/XZ2rBULQQkj6yRkClU6CwlBJyZ0eWGgipp/NN2hyEk4jHko9iRhuwMw+HoOEDAVDCxmxmGkMeGGI+ht5alu+ci2QuGVKTD0Xgkyu136VEoBBpmKXjpuSAfuVmHWi1QWaNAqZTU0Veu1xIMiGx+LbXY79gqGfvPW6k+K0xAJigo0TTgidmwKEsIn3Zc0cgMFKir6A2dICZmTzlxJjjnmcC5iI53noN3nsto3/PANzLaEvHYpHadk6UH6Dv8Jn2HM411mfPLPu7QNQVZpv0lGvRmDVY6+caf046rS1Zj7RLY98Z9BEITW6iyGVZzlq0k7/IPEXM5SUTCCEolytw85BotLlc3jraTRAftiKJIoOXkuNdwdx/nwN//fUyavQ9/M/34wXuSv8f6e7i7j2ddKIfDb+8c97mPhngkSPvOp2Hn0yiUWrS6PLzusVUF+UXzsPcfHTNKNexzEgv7JScHuZLeQ28kz/ls7UkmMFK3PuRGWjz3Epq3PJJ2TmXITfYbyQTDPic6SwnZMJrqKOiZvM+9mIjj7j1Bfv1yBo5vT3sGORVzs3rTNR6OolAIVNXIWbBExTOPBxAEgVlzlZRVyPH5pM1FRZUCrU7gUGvmfZhzzo5pVSs3EhejuKMDGBQWLKoSgnEvwbiXcCKAXFBOM4HJQCnXUm+5gDLTfEIxD52eQ7QN7kZERKMwclHVZ2h37eG4/a20fivKbkMt1/N2uxQIJBPk1OSuoMQ4G63CRDjuZ2v7XzKC1BYWXcPhgVdosF5MkWEGCpmKbR0PEoimi9PnMi586Ha23floMjPkZNDaswWDrvCM5xDzek9v6kVkWh3RQSeIEPR5kKnUxHxeooN2dNUzgPGZgGXdelTFxThffgndzFnEvB58e/dS+uWv0P2rX2JZtx6F1YpMpcKzcyfGpcsQYzEUubkMbnyV4KnsAYeThUyrpeATd9D3298n25QqA+VVq1AotbSeeJWKmkuQK9T4ff0M9B6kuv4Kujt2EPDbKKu8gIDfjtfdSUXNJag1Odj6DuHzdFNVfwV93XsRgLKq1Wh1ebgHW3EPto06n4CjG62lRMp9NWyx9NtSMTcjjcLt7zzLzLWfx1K9iHg0TM/BjUQCbkzF9VSuuAGZQkXA2Y3tVLrThKvrKDpLCcXzLmPg+DYpgEulIa92KWIiPikbwnjoPbyZWeu+SM3q2+jcvYFIwI0gk1N1/o1Zr9XeGiPgF6muUzB/oYq/Pein+USUeQuU5BfKOXbkdCyHDJyOBP/1nczcRz3dY2cxmCi6g8eTsUvdweNJp5iR8UxnG/9fMoE6ywXUWVbybvffabRJu5ya3OVcWfcN9vQ8iT3QxpH+V5hXuB6bvwVHUHrxa3NXkKMpYWt7apd7Re3X2N/3PFvaUyHla+vuYV/vswz4UwtEkaGBQNRFo+11Gm2vp83nshc+zZGfbKbmliUIShlH/ncTniZpp2OqyycejjL3m2swzywg4gyw83NPEHb4qb5lMZXXL0Bp0uA5YePYr7fgaRpAkAnU372S0itmojRraH1sHyf/vDN5vepbFlN35/K0PgBFF9dTdeNCTA0FhGw+TvxxBwPbW1jxmxvRV1qQqxVc8cYXANh42a+zBspNBAW5MzHpSznVtQmtOpeGynWIYoKDJx/DoC2guvQiTnZsJBRxU1N6Mf6gjX6nlJvJd/zwOKNLcA/uGpfGuOw8dDNnErHZMCxegvPllyj61N0ET5yg/68Pp51PRCSjemSgn8HXXkVhNpP3kRvHZAKl93wdxzPPorBaEUMh9IsWIigUODe8QNRmp/DTnyLhDxBqacF/4GCyX84Va3BtfB1LXj3RiB/3YBuJRAyNzoLX1Ulf127yCufgGDhGfuFc2k69wUDvQfIK5gDgGGjE7+tn5rwbOe5sprP1bXT6AgYdJ/F7++hsfTu5sAtyBYIgy4jtGDixg7qL78y4J5+tDb+9A5U+B1fn0fRzA63sefge1EYrxXMvYea6L6LSmfE7Ohk4vo2BEzuzuvV273+VvqNvM3v9lylZcAWIcUJuG/bmPbTtfIrqCz6a0adq5U3k1y/PaF908/fTjkdGIfsGWjnxxp8omn0Rcz98L4JcQdhr58Dj/05u1QJqV9+eRp9IwLNPBLhkjYb112j51lcHefRBP7feoUehFPjD/0lG5j//xsfPf59LSZmcB/+YHgNylpK9ZgavvseL/xD+v2QChYZ6fBEHzmBKN9nhPsAM62qKDA3YA230+U8yOxGl2Dg7yQSKjbNxhXrxD9u9xxNRBnyZO06rtiKNCQC0uUbXBc/8wioO/uerlK6bxaLvr2fLrQ8nd9wNn19F02+34u9yYarPJ+yQDECl62az719fJNjvpfyauSz7ybVsuvqPFF/eQNHFdbz71aeJDAYxNaR0nWVXzaF03WzeuvGBZJ+tt/+ViDvInK9fwqEfvI7rSC9lV81h3rfX8PoVv2XH3Y+RM7uIFb+7iY2X/2ZKksBw6DR5+IKSO14wPIhWncPAoKQ2icVDKOQqQhEPs2s+jEqho2tg9BzrZ4KobYBwdze2Jx5Ptvn278O4dBmuNzdnnNfNmj1ht0SZRkPM6URdWYncaCDU0srAQ39FYbVgve5a+v98P0qrla4/ShsKmVYL8Tim1atwbZQ2CYlEHK3OikyuwuvpQqkyoFIbMedWkUjEMZhKEUURrc5KUdky9IYirL4+QsHU+6k3FJJXOA+vW3qHfZ4uahrWY+s7jMfVDqKIqXQGalMenu6mpCfTYPvhrGkcABpf+uWY9x72OjLz8Y+DeCTI4ed+hMKcQyIYSDJdAPsIyQGgbccTtO2YWs6k0dR0ztb9yfQXw9F4JMq93zXhdkvv/aEDUf71+wpEUVIXAbz+SpCNL2v4xndMzJipYN+eCBWVCi67UsNdtzjo75WM4aVlcvRGWdKgXFuvpPVUDLstQTgsvVsqlUBVrSKNZqA/QXtLLEnzfuKcZwICQlZWO5bOU6cwpzEAgFgiTDQeQqeUfNzjiQj9/pMUGWbQaHsDg8qCQWVNSg5DkMuUXFmXqetXyjVpx7FEhEh89Ajk7peO4jrai6/NQenau7EuLsO+W/pw25/cj6tR8r127E2J4M0PvYvnpLSYtjyyh+qPLpbmpJUCuGLBKFFfOK1P9S1LOPXALqKeULJP/vlVdL96jO5Xj2HbIRnM2h7fx4xPnT/qfLPBetU1JIJBFLkWHC8+TyKc3RjmD9kwG8rAAVp1LsGwi2yG2+NtL5NInH0d5xBCbW1oZzRQ+LE7CBw/hnf3u/gPH6b8nm/ienNz2nkA756JMyP9wgX4DxxEM6NeslsUSAbOmMOJwiIZzMVo+u5bVVKMIj8PzxYp/4ut7xD2gaOIiTi1Mz/E0X0PEY0GaZh7A01H0hPQtTS9nDGH44clmkDAnvTI6el8B5lMQSIh7chlcgVytRZP93GUOlNalthxIQjoF89AWWTF9dIOZHotqmIroVNd6ObVIjPp8G2fmOQGIMjlVH/xW/Q+/eiEJb73A42Ho5hzZLy9SXqfm09EScSl/UB7q/QcRRG+/vlBbr0jwvUf1XHZWi293XHefD2E25VaizbuSFeJ3vtdE/d+18R3vu7iuSel9eHytRp+/OvcNBogjeb9xDnJBOQyJQ25qyjU1aKWG7LSvNr286ztSWQT0Ua09XiPUmKcTb6+hlxNieR66kvfQUTigQzGABCMpusGxXEi+/zdEn3MHyHs8KMrMSfPeU5l5ueRKeUs+N5aFnwvM0ai57Xj5K+o4qLH7qR/SzMHv/9qso+u1JzRT1solazztaZyF4kJkXh4crrMqN2OGIsS6etFjMfQ1tQRbDmTJQROAAAgAElEQVSFSmmgpmQ1ZkMptWWXcvjU01jNdcyvuxGZTMmJjtcozktPkqZWGplRuRaZTI4/YONUl5TIT6aQUTTPiqlEj1yVqSs++mxm3INCJcOcr8TriGLIUXDFncVs+G035jwljq2vMxhMfaRiJELHff+VPB7cmJ4JMnBM8pSJud303Z9u/B4O/cIF2J94Ck1NNaIoEu2TVG4Kq4WYUzKMjxQqIgM27I89jkytThYqGVq8+3v2UVa1ClGM092xfdTrZsNIl8whBiDIZJgr5iDGY+RWL6RnX/a8TKMPLBJzeFAWSQGDOevPJ9prJ3QqtcFSV5cQ7XOQe+1qBIUc75YDhNuzB5NpK6qRKd/74KfJ4sTxKHMqUilA4nFYOjOTWSYS8MgDfh55YHRXzeHjjIaXNwR5ecPZTSFzJjgnmUBDzoVUGBfgCHXS6z+BQlAhlymxaioIx/00OjOzeA6HP+pCp0iPalXK1ChlGgLRVNCNI9BOOOajxDALs6YIW6CFaDw4op+GAf+pMw7flimGeRAIQtq+OBHNMrYAe+99Hsf+roxT8VCUfd9+AVNDAZXXzafm9qW0PLIHSWgSMvqJcelqk130R8Lzzo7k/BFFgq3SghyJ+jje/jK0p3arx9vSMyI2d0neS6GIh/1Nj1JbdgmHTz2JIMhYOusTSbrbn1o3Zp3VbExgyRoL0XACS5GKI9vddDUFSMRFKufoUapldBw7+/7VyqJCYk4n8UAABIFAYyMFd3wMQanE+fwoLs2iSMzhpOATdzDw4MNpXMLn6cHnGX8BmRwEvL3NJKKhrAWDJgvfjsPol6VSo6grClFXFBJ3+4k5PUT7neRefxF9P388a3997cys7dMYGzl5tRSULUlqRE7sz/58p4pzkgkU6Grp9h3lsH0jIKl3AjE3SpmGFcU3Y1BaGQyN/lL3+ZqYYV2FRVuOMyipSsrNiwDo96V8xEVEeryNVOQsRi4oOGbLZC6CIKPCvJg215nprXVlElNS6FVorHoC3WNXWEpE4hjr8rG9M3r1M0/TAId/+AZrXvs8LY/sIRGJE+h2jdsvG4bsAIJMYFx+N7R4TSHB1xAGnMeYU3MtCoWW9r5UVKrOqmXLT/bT3+ggHpmYbaK3Jciiy3Lx2KP4XVHcjig5BSpKarUYchTvCRPo/A9Jmhh8KVUVbuChv6bR9Pw0Ja0mgsGkZ9DAA+9PziFJQhCx1C4h7LETck891XE2yM0GKetqJEbU7kKMxhh8NjP9sb5+FrnLV6Gvk5hA6c2fSDt/4vvfQBRF6r91HxH7AO1/+gUAeZddhXXVZQQ7Wum4//8AyL/iGiwrL6b1/35AxGFDmWPBuvpydLUNKAwm4sEAXQ//nvDAJNRe5zjyShZw6vCzo5alPFOck0xAEGR4IykVSY6mhIDPTTQR4pjzLRYXXEOn99Co/VsGd9Hh3k+95UKWldxEMOamy3OE15p/mmFLaHK8jVVXhSvUQ78/0wD82qmfUJGziAvK70CvspAQE3R6DnLKsT3DTXQsxEMxzv/DRxEUMnZ+7gk8J8b/IKPeEKse+Ti6YhNRb4jBQz3s/97LlK2fTc3tS1HnGRBjCXZ+NrUz2HLbw5RfM5crN30x2efQfRvHlQLcTQMc+d9NrP77HUQ9Ibbf9bcJ39tU4A30cbQlM9Ziy4/30rhhcpW0Oo750xb6w1skae+ZX7y/4fdnC+aZBaz64028uPrXk+8swMpffwRdkZE3PvIgcqWGeDSEoagmmTpappKz/o301B8vX/47EpFM7h9u6yXcJi2okW4bkW7JRhU43EzgcLpUJsjliPHMMfwnj+E/eYzi62/DNH8J3Y89kNUm4Nq7C8vKi6WxZDJyV6zCd/wIhplzkzTmBUsJtJ4i4rAhKJXUfOU79Dz5MH0bUkbk+n/9AYjQ+psfEfNMLN2GuqYC49rV2H/7yJh0Mp0Ww6pleF7bgunK1Xjf2oUYfu9KPwK4Hc2UVK1MHnc1n1kmgJE4J5mAL+ogR53K8VFpXMRAoJlYIkK+tppIYnx9WiwR5ph9E8fskq5ZabGmMYC8tR/GvXsHUYeNHZ2j78xERNpd+2h3jV0ce1Pr2B9soGuQnZ/JFOM8p0ZPatW54QidGzJTXHS93EjXy41Zeozdr3dTSgpSVZSx/7FB1NWVKEuKiHR1Y2v04fr5UQS1CrnZhLIwn9CJ0XMPlWob6A2dQiXTEI4H0MpNp0PbpbQCIiJqmY5wIjBhdVrZeYWTZgLTSEFpUGOZl/p2okEv7o6jBHTD1IOxBEd+/jaqHC2qHC1V1807K9fOxgAmg3DvMFtDUSkypQrXvl1JJqAwmpDrDYR6JOZumrMQ77FDeBsPpo0zuPNtrBddQe7yC7G9/mLGdZSlRZiuugSZVnLusP3qQQDkRgOF3/4ccYcL+58eA1HEcNFy9CsWEWpqwf3cxjO6v2yQqZUICjmJYHhUl+yAtx+tPu90reKz7z10TjKBXl8T5caUIdGkyueS8s8QS4RRy/W0uicXli83GMk5fzW2l55Nttlfff6szfdMMOvqak5u7EBtVBEJRBHjUlETnVWLGE/gG0hneFqDHK1ejs8dQ2eU43fHUGlkmPOUyGQCerOcrpNBohERnVFOOJBAo5cxOJAutUS6eoh29aCurcTzxhZMV1wMiQSeN7ZgvORCzGsvxfl45k5dqZWz5IZKIsE4rlf0VOsXoZUbcUX68cQGUMhyMCgshOMBVDItCWIYFFba/YeIiePvmMqXFbL6G4s58swpPD1+YqGpLyyGcjMVl9dRfe1s1GYtsWCUkMOPbX8v+386foWmazd9ikQ4xob1DwKSqqxkVRXll9dRtLISQYCwO4SryU7P1jbaXnrv6sBOFFFfGOfhXjQWqaiNTK6geOEaErEoXbslW4WYEGl7VtqJy1Tys8YEzhRDiztIRmQSCQKtJ4m6JJdYdaEUrRvqPZ37qKoO/8nMZ+47eQzrRVegq5mR9TrR7j4cf36ckVnf5NYceu79IYXf/CzK4gLEWAz98oX0/+j3FHzjblTVZcT6z7wwlCATmPE/t2CYWYJMLXn6HfuXh/Edl1TcCqMWpdWAGE8Q6nRQUn0BbkcLsWgIQ07ZGV9/JM5JJtDtb6TLl9rJ7ht4nirTYgRBTrvnAK2eiTMBdVEJlovXoCoopvD6W/AfP4oy14J52fn0/P1BIv29FFx9A3KDgZjXg1yro+/JR7CuuQplrhXn268T6X/v9IuGAi1zrq0hEowhxkT8jiDaHDXxSIKqVSVs/el+Iv7UAr7mlnwC3jhypUDInyAaSbD/TTfVc3R4nDFEERJxuOTGPEL+BJYiJb7BGNs2OAn6hy2oiQRys5FIVy/65UuIuzwgiuiXL0EQBLxbdqI/bzH+d9MloOrz8rjy3rn4HWGeecVGKO7FG3WgkKnQyk1oZHpiYhSLqoT+cAsF6iqCce+oqrMv77s57TgeTbDw1hksvDX7B/yrxY8lf6urKogHAsQG0r2r5BoFC760kuqrZyLIUwZ5lVKNyqTGVG3BUGZi3/9uwd+bPeNkso9ZgzpHi0wl47zvXUb+ovS0AboCA7oCAyWrqnAe7cfT9g+OEBdhxxdSBV/i0TD2pncwFFUzWuK3cwURp51ESHLT1JZXEbYPIEajhHokV2p10WkmcJpZKE1mvJ7M5x1zD54+P7mU59EOyTAf9/qQadTIjBYUBVYKvnE3ADLN6EWcJgq5XkPdd6/HtKByVBpVoZk5/yfZTXav+wGxaBC3o5X8kgWo1KM7TUwV5yQTGKm3twXbsAXbpjRWuK+Hwe1vYVywBNuLqRqmqsJhKWUFAUGQ4dr+NvlXXYemogqZWk3fEw9Tcutd9Pzt/ildewibrv7jqOe8vQEUWgUak4qQJ0LZkgJObeqi+qISWrd0Ew2m6/IVSmm373fHMeTIObozQG6BktI6LSeftDN3pRFnb4R4VMSQI8feHcFli6LWydKZADD43CuScXd4BaVhv6O9mRlaa85PJfxq8UsMQkBAREz+P7zNG3WMGfl45Ompp2UIt3UgqNM/TLVZw4U/XU/urFQAXSKaIOIJodApUZyOsSg8r5xL/ng9277xEq6mTBfd4bDMLmDe55djqk4lzAva/ajNGmTKlBvrql98iDfufIqw69xx/9NZSxHkCqlI0LnNA6Sa0X2SSkhTWkmgRVJfhro6kGu1qAuKSYSCRJ3Dd+NZfMEnEsI78r1HSg45HNHeAWJOFwM/+ZNk70gkkiqkKUGA2m9/OMkAooN+lLmZGU8Dp/oI97lQF0lMrKt5C9Gwj0jYSzh09lKKD+GcZAJjQS4oqDAtoNW9d8J9xHgcmWpsLp6IxYgHU4EaQ/7MIxlA2TfuoesnP57QdQ1KK7FEqqxgKO7LoDn+clvWvram7DvKZ36bXSp54ueSKLn5Cel6Pa0TyGqYzctnDJ2jIV/D8ttqMtqHFvnhi322tmzYfN/UMm4KKiWGlefhfTs93/3VL9+Z/H384X0c+UNmNCpIqh6NRcvl999Az7Y2dnxzdB/6C368jkQ0wZYvv8DA3kyvNJVRzZq/3oQ2X8/ax29mw7oHk/rdlb++Hsu8El658g/EQ5I09KEtUo2LPf/6En3bWpNtLY8foPE325LjXvjHmzDPyMdzyk7MH8FYa0Vl0vD2nX/H25Kulii/ajaaPD0qs4bKD89FppTz4upfE/ENotSZsJ+YeqUvQSaw6N+vpPD8SrytTsSEiLHGikKrxN00wNa7JxbZK56uVicoRl92XHt2YlqwFGVOLs6db0ltu7eTc94FGGbOxfVuKobCte8dzEvOx9/clDZGzhIpCNJ9cAyPvhHvebilg/Bpo/Bw43D///xWIj9t70gEgnhekzyghv6fKOr+7SOYl9TgO97NsX95GIBlr3w7K+3Ai/so/9SlGHPL0erzUGslhmC21mDrPpi1z1RxzlcWGwmVXE9D7urksTq/mPLr76LgoqvImXde1j6RgT4UJjPFN9+BvmE2+Vddh7aiCuslV2BeuiKDPtTRRsw9SPHNd2BanD6mMi9vwnP1RR2E4r7kv392zLjozBPEnS0oLLnIjYa0j3l4FtTBYwMc/dPoi0DjX1LnSi6swlyXWUFtOJr+diArAwCIeMOcelLSsSsNakzVqWhQ9wkbCGCoSrUNHu1DjCcwz0x/nu4T6U4C2kIj2+5+gq2fepydX3mWzTc+hH1PJ/UfX5oxh86XGjn50G6O/morsWBK9RYLB9BZy7CcQdGj2lsWU3JJHZtufIhtn3mS7Z97is03PoRjfzfmhomnfI44JYnLUD96GdZwbxfG2QtIhEJE7JIHXSIaQVddj0ylTrMb+I4dwjhrHsa5C9PGyF1xEYloJI1hnAvQN0jaB/vG0T0bhxB1Sd5uQZ8drT4PR+9RHL1H8XsnXxJ3PPzTSQJD9YGHUHDRVfRvep6CVetQ5ebhOpy58xNjMbofTGVv9Dc1kv65pZKR9TwiRYk6NqdHkg5hSGc5ESzK/xC+YeqQU67sSc/+/fA1AHQfGuTPt0kGS7VByc2/WoalQo/eoiYaiuPpC/LMt/bRfyKzduxoKJ2fy9wrS6henk9ejYGgK4KzM8DJrf0c3NCJd2D0+zHka6g9P5/CBhNFDWaql6cYoN6qTs57JO5b+iKx8NTyD5139xze/VMqcVn1qhIu+uYSevbb2PRf7yZjB+Jub4a9Im9hSl9/8onDYybAa3m2kTmfXIZcI30CNdfMYv/PtmWlFRMizU+PXYjIdiAloWnzDbibpahhz0lp4TNVW3Eflxa1wSN9KHRKcmalL6BDKUKGcOy323APa4sFozT95R2W/ve6MecyHHKVFl1eGe6OxszC6RPpr1ZQe8siEpE4EXfqXYl4Qhz5xRYueugW5BplUsoZC56De7BeeDmmBUtR5RcRsfejMJrofOh3qXGddvR1Mwm0phea11XXAymjMEi783jAT8kNHyd0/sVEnHYUBhOCQkHvM48SdU2+9kLRxy5BU5lPqN1G31/HT88+GhS5Bsq+9CHavp+yYSnNkrE+3De+SmcobicWDdJxcnMyKryvbfzEiZOe61kfcYrI19UgQ6A/0EyJYfSdwshIYDESITL4/tUO9R8an4sPoct3dHyiYcirkYw+FYutfORHizEVpSohyZUyNEYln33qYrY/cIpNvzw25iKnt6j50PfmM/Oy9HJ6hnwNhnwNFYstrP70DP5n+Uuj6olnX17Mun99fz1HiuamduT6PC1rf7gSvz1Ew7pKnC1u9jxwDJCMdNH+9L97/sLUvfbt6mAsxIJRbAd6KVoh1cMdafAdDvdJByHH2Dldws7UeaUxtVEZWsSNNZI9QV+Wg6fZjsqsofCC6iRdPBTD15GuAux9O7MEpq99EFWubsy5DMdQdTC5Wjul4L7cuUUoTRqchzPVkN42B4lIHHN9XtbzGXPxeuh48NfkX7oedUk56sLipN4/CVFEkMsJdaUHOwpyOfFgQEotPgxtv/8J1tVr0M+YjbGolEQoSMeff0moNzPSfiIwLq7h5L/8ZUp9x0MiHEWukCPXjJ86Q2VJpcsxW6o+GBHD86xSVa7+QDPz80avKTwSEbeDojXXo7Lm4z059bKRE4XjxRewrL8K95a3ifvGVvGUG+biizo54dpOqWHOuGOrDQpqzs/noz9fhkqvSO7+E3GR3DIdCrUcBLjgrjrCvihb/zR6Pv27/nohloqU0UlMiNiavegtavRWyT6i1Mq5/geLee47+0nEMxcIR7uPo6+mVCB5NUYKZ0jJrmLhBE1vZv/wJ1FdMANde1JBdAturkemkPHsZ99k0W0NNKyvSjKBuN+f4b1krpUW2qDdT8QTZjy4WxxJJjDc6JtJN/6OMjEs8+rwurneVieJaBxjlcTccucU4jlpQ2lQU7Z2JvpSM/5uN55mewZTz7a7jkdiWYv/jAaVzoy7oxGV0XLaz3xyEpqhSnoulnnFSVvGSChNmcbSN3YXY86VMehIcMXy1HsS7uuh629/ZskKNf92Xw7X/Vem80HTf3wta1uWcsSUFwT403/swJy7K+Nak4W6PA9VYQ7lX70G3+E2BjcfovSz61BajfTe/wbqUiva+mL6/7aFqu/djPOVveReNh8xGkdZYKb/0bfJuXguMq2KuCfTOSDc60JXV4Smwgo7s0xgGMxLa5O/PzARw5s7/5B2vLX7wbSUzkMwqvK4oORjyeOIy4HroCQi5S5amUGf1ldTQK6+Eo1ydDerE31j5yUquPkWAPKu/0jW8/0PpwLP9tleYEHeegDytVV0T0Ay+Ngfz2ew08+v1m/C78xcyIZUMJd+eRZhf4x3/5YZWHXx5xuwVOgREyJ//+K7nNyavQ7zZV+dxYWfrGfuulL+cvs2ug+nP+/mHTaad6R22xd+sj7JBMK+KE/dM3Hj/EQxtMDVXVbO0rtm88xnNuPt9eM45WL+R+vTaGU6LTK9joRf2oXriqS/a7B/YvaXQN8wujHW1cDA1O05YjxB12tNVFw1G5lSTuW189j+uafwd7mZ/YULqLx2LgO72ul8afTgvzNB2CsZkLOVg5wIhv4evW+dYu/3Jp6A7vJlvVx1nY6vfMuc9fzeXWGuuyzzvSwokuOwxxlZlqCgSM7Gd4pZUtuVdq61OTbutSaKcKedSL+Lzl9sACD/I+fjb+zE9fYRZvzfp+l7OFM9FOq00//o2yjzTJR+fj3+I+3YntmZPB6OE999nHn3f46yOy/GvbuZQEt61gCFSUvBVYspufUCBIWcqEN67z6QEcNdviOE49nzvUQT6QujoWZmkgnoK+oZ3L8jo48gCMwtvZqS3PFVG+MxgeGL/HiYbbkEvTKXedY1+KITDzJ56b7DWRkAwGBXgNwySR1QvsCSwQQUahnLbpbUDPuf7RiVAQC8+X/HufCT9QgygQs/WcfjXz07ef2t11yDoFYT7evDt28fOZdeiuedd4gOjJ8qY/HHGlDpFcy+tob+o066dkt9zGUGAo6UTlqRkyPFNSxZiHeL9DeP+qVgNLl6Yq+1QvP+vP6ek5JxWF9qxlgjSQTxcAxvqxPzjHz83W5cjaP/nf6R8LVLG4OheZ8pikrk/PW5Asy5MiJhkQvnSr75arXAg88UUFOXqusLsLS+C6VC4IW3iwDYfaIs7dx4UucdnzFyy50Gerpi/OT7bhoPTzzFQ7jTjq6hDFVhDpF+l6TO0Y2Qekao2NQlkuSkKsyMUYi6ArT+9EXqvnMdc37zSaKDqTWu8gtXoKstTKp8xFiC5h9KwZo+dw85+fXIZApsPRNXR08U5yQTOGJ/fdRz4bif3f2pYBiZXJk0eMlU2XVtldbzkgzAF7LhCp55RsWJoMd/HE9kAF/UiSs8MTHV1R2gefvoi2XXQWeSCZiKMsXwugsK0OVKz2H3Y21jXmu4CqjhkiK0ZhVBd4ScyrloLSX0Hnh9SnrkUFsbYiSCTKPBdOGFeHbsIOeyy7A9Mb4robPNy7JPzmGw3cPr/54yglWvLqHvUMqfP+Z0kgiG0nzChwyX6tyULWUspNG9h/7zQ14/eUvLk3EKAK5j/RRfVIv7hJ3Ol469dxM4AzgP9RD1hjFU5I5PPAH09cRZc14vqy/T8D+/TKngwmGRW67qZ/4iFUcPR9J2++G4yN0323j4uQKWzejKkBJGw3Uf1XPtTTq++ik7F1ys4Xd/zePDl/bhck5MJebZfRLj4lpK7r6C3gfeIDLgJv/686m457qMaOMhCAoZFd+8nmifKyvN4PYmTv7HU9T/541pMQK6uqLk76grQMsPn8N7RDKCF1Uu59TBZxDFBDVzrsbZd3alxnOSCYwFUUwkK4EBuI/tp/q2LxG29+Fpys4lhxhAU+8btNmn7i89WdSYluKLOunyHaXUMGdC6qDWd8YOXPI7UzsZtUGZcb5iifU0XZi+42NnKh0OQSZQsdhC05t9yORK3B1Hp5wl1LBkCeH2djzbt5NbXk4iHB7TN3w4nv7UJuQqOfERycw2fX83nt7TOyeZDN2i+SgL83G9kPLiGmyyU3ZpLRqrDrVZQ9g9tifXkA0BwNP+3kX6Dun7iy+qTWt3HR+g4uo55M4pzJ5O/BxAPBTj5MN7mP2FCzDVWvE0D5NoBbDML8F58GynwD47uPOzRn7/Cw/Hj0Y5fjTKxz9tZNWlGl54anQjf5pRWITu36erwFr/4+9px57dkl0uavekeQKNBde7p+j43evkLK9DV1+EwqAFAbyHOnC9c5KBVw6QCA6XWETU2hzisTByxdmvx/BPxwRGwn10D76WY6hyrAR7s3uE6FRWIjH/WWMA+jlz0dTVIdfpcG/bSrizE4XZTDwQTKsmdXxwK/U5ki5vojYBW/PYaQyGGw9lWQyEBXWSzt52auxxhhCPJpArJYtb4QwTTW/2kYhHMVfMIeDsmRIjkOv1yE0m1FVVeN59l9x16/AdnHiAy0gGANB3JLX4CIJA6GQLkc50ic62L3VctLKC9ldGeJ4Mg0KnJG9BypvIfvC9Sw0SD8Xwd7qwzC9Jlg4FcB2XVEC5c4pH6zph1N66GIVOhdKgSkobsz6zkmggQswfoeOFo0lGU7Z2JmqrDqVejdIoOQnM+fIqot4wMV+EqC9M+/MpJ4uWJ/ajLzOz+v5b8DTbCQ8GUOfq0BYZURrUU8t2+h5DqRQor1Lwg19Z+MGvUsy+pDRzyTNfeR7htj5UJVYCB5sxrz3vdIGcg6hK89DOqca74wiJQJiCuz+Ef/dxnM9MLlBsJPo37KF/gxQoKcik6omjlXXtOvkWJdUXIFOo6G4ZP+fVZHFOMoELSz6OP+Zi/8CGcWmrbvsSvRufIubzoDTmEPVm+uD6wzY0yjMzGg3BevU1xAYH8ezaSfk99+I/eoRwZyemC1ehmzUrLZq4yrRo0jYBr23icQjZYC6WVBye/omN47WFyCmR1Eu55ZJ4KldpSUTH964ZDaGWFsR4nITPR7S/H/uTT47faRwoNHLm31TPvoePS2MHQ2hn1icregE4G1O/l/3bpZiqLRz+bXa/6g+9cEfSdmDb38O+/z2zj3o8vPWxRzPaPCftWRdQ9/GBURfWRCSe9Vzz31JeUkd+Mfa9dL2annTt8E/fGpV27UdzOHk4RLXtIL6f78dri1FSpeLUkRBFFUq8YZF/+WExf/jvfgK+M6tNDRCLg1wmEB+hn4ud3hdkO5cN0ahIV3uM557wc/9vx94QyY1atLMqEGQyTJcuJtptJ2qXpGiF1czAH1+g8IvX0//rZwh39DP4fPZ4kqlC2tiNfk9FlefR3bKFeCxCef2ldHgzKx2eCc7JiGGd0owjOLGiKFGPk7Ctl6jXlZUBAHQ696NS6Ci3LD7juekXLsS9bSvR/nRDXtRul4yVw9DjP06H9wCdviOjBoqdbUT8ksJUqckszZgNw+nCPskFTa5Uk4hFpqwOcr78MoOvvUa4++zZXnRWDRd+NRUZKtNqkJuNGXli2l9N7f4bblvIBf+7Ls2lUldkZPZdS5NG4agvwp77ph4UdK5Bb9Xw4V+tmjD96q8tHPN8NCJSWK4kFgO5AuYv1xH0J2g6GKSrOUL1TDW7NvkIBhLMXDgxW8xY6O6IceXVWnR6gcJieVp7LCZmPTca/vgrD3d8xshFl2sor1Rww216tLpM6TnaPwgiRHodeN4+gHZuNdpZFchzM70Iw8095H3silGvOZS9ABg1g8FkodKY0ejz0OitaA3543eYJM5JSSCWiCIysV2FIFdQdt2dhO19IIrYtmVG+nY592PSFjGrZC0GTQGn+t8ilsjuJTCeH7XckL3mMaKYofcu0tWhlhvIUZdQoK3hhOu9D2MPuKT70lkmpjvUGFN2haBLYgJ+Wwd+29jBVu83VPph9g+ZDO3MeiAzAnbfj7egNmsoOr8CgOILKrlu86cIu0MotEqU+tRzifoi7Pj2a+NmEvEMGNMAACAASURBVP3/GVt+dmDM85uedSOTp2I/BBkMfSLNjSFajksSp0Yjw+tKqfHe3FeC0SygUAhsbyzF50lw5Ype7v2PHNZeo8NoElAqBTa+U8x/fXuQrZulcdyuBF+8x8x37suloy3GTWv7k+33/asr49x//jiX1Zdp0671lbvs7NkV5sVnAmi0Al/7Tg4Gk8D+3RFeeDrTHuDdmm5L7P/Ns8kCOYH9ks6//9dS8kn3xt0IytGXzf43X6BglRTRbaidlZbBQFdXhMKowXu4EzE2cRtQR9NGCsqXIJer6Dy5acL9Jopzkgn0BU5g1VTS6c2sPjQS7sPjuzUuqrwBvTofQRCosC6hwjp6HpXXDt835lgxV3ZpQ1NTneECGY4HUMg0iGJ83ERqZwu9x9zUXVhAQe3EUs4O2QMA+k9IIrDOWobanI/z/7F33nFylfX+f8+Z3mdnZ7b3bHaTTe8JgQQCIXQpgiAioGLXqz8VUa/1elXs5aqo6FUQEA29I5AE0gvpZbO9l9nZ6b2c3x8nO7OzM1sTNN57P6/XvnbnlOecnTnzfJ9v+3yaz30fwFhUX1SCoBBo2SJ1eM65qirncRm6w8kk/t25iecS4Tg77n2Jhg+toO62RchVcgSlHK0tk63ReaSfA/dv++dTPwMbvrwMnVVDwBFCY1Hz0pd3sek/VmEs1PHGdw4w3OZl7tVV1F1RQSKS4PnP72DtpxZiLtWj1CrY/osjLL29DqVOSdhzJowng6u+uwa5Ws5bPzlMXpWRhmur0Odr2fXAMbr2DrDsjnoWvHsWf3zXiyCDTf+xCrlSjs6qZvM9ae9odBnm2DXSyOtQMElPe3phdcnS3Mni73/Dzfe/MTFtwqbVufMzTz0e4KnHM0vHv/4FFzD+Z7j5kQCbH5m+vOhogZybb9by1ltRPJ4kBoOMUChBQiFj40YNu3dFUKlldHdLx0/EXlB43TJsGxcScwU49N6fT/leVBozxrwKupq2oNbmEfSdW5nQ89IINA6/xdKC66jLu5B27wGiifGpeX0t6XKpvEXZZHAABab6c3Zv/gMH0C9cSOBYOnEmUygwLluO85lMoRqLuoT+YBPuSC+h+NT5fs4GHQecXHTPbLQWFcUNFvpOTJF6VoTOg1JnbMDRgcqQ3WEqjkPWdja49GuSyzxiBC7/du7PcDoQkyLHf7uXtqdPUHllHbNumo/KrCEelERlhg738/YP3tkcwHQgk8mQyWW8/chpLr53CYjwyr/voXZDGbWXlnF0cwsLb6nlr3e/LlUZLbKh0il48b5dWCqMXPTZRYRcEV784k7KVxSw9I56Zl1cyov37cJUqufiLyzh6JOtyGQyXv/OflZ9qIGuvQMceLiR/NlnQphnrglQu+HcC5f8K6OoUM5ll6k5eDDG7e/V0T+QwDmURKuVseYCNZGImDICI+wFJVfdKkUnRsHQIL2vvqPT87ILypcx0LkfhVKL0VKGa7Bx8pOmgfPSCCywbUIuKKkxr6DGvIJYMjvJ+ZZvM1GXA7U9XVmhr67HdTg79v5m47mrXnC//hrV938fMSqtemw33oTwvjsIHD2KZ0dmwuio81WKdLXMs16KQWlla887w0kyGm27HXj6QpiLtay8rYpnvjq+uy/I0xN5845Bgq4zoSRbGWIinhUai/jTBdo6iwqlRk7sLJS/AJ79VGb349bvHWC4Nbu01Vpj5uL70h6cpaEI94mJGRWDg35O/ultTv5pYmnQ8fD0pQ+Ou89aOBetzkZPm1StERoMcPQTLhoPzYzXJRFJpFbxaoOSS+5bhkIjZ7jNi7lMj7PFk6oMs1YbKVli56rvSZTJw21ewh7ps3N1Sl2meZWS5+TtCWAqkbwgZ6uHiC+GUpf9tR+5ZtgXxWDX0vzGzLh3/qfCYhZYtVJFKCTS051AoZRhMsvYtTvO5ZereflMJan3xNuEB3qIOgcI9rRnjDHCBxQ4Pb1KNDGZQKvPJx6PoNGdm6a90TgvjcAhR7Yu6HgwVNfj3LsVgLg/92p7Xb3EeRJPRPCG+ugafhtPqI9QdPoCDWIiQevnPzelY+PJCN3+43T7j2PXVk9+wjlAMiHysyte42uHr2Xx9RUsuLqM7Q82se8v7aku5PwqA+s/WseCq6WVyf7H23nh2+m4aHCoG0NhthLV4We7uOyzc6X+BBl8+sVL+dGGMbqr0xQuGTyV6cqfeqEtldweDU+3n4vvW0bxhjpUVh1Kg3pSI3AuUVl3OQPd+4mE3MxecCO97TvR6iRW1dKai/A62xCEqSXjJ4PaqMJcpmewUXo++48Nk19r4fr/WkcsGOeFe3diLNKTP0sqB3Z3+Chdaueq+y/A2+NHTIrs/9Mprrr/AhRqgRe+sBNLpTEjlKMxq1j90fmULMpn/o01dO4awFymJ9GWJDCqMzvfPpeikqUkk3H6e/bjGm6hZvYmNNp85HIlrU0vU1G1HpmgQKUycPrk0wQDg1TNugyt1orb3U5ftxQXL7jzfQw/+zwFd92BqqSEUHMzQ4/9Ffsd70VTLYVTHY8+TrT7TEGBTIauYS76JQvRL14MMkn1K9LejmfLm0Q60itqhdVK+de/TPDoMYInTmFcswplYQEyQSA26KDnhz/NaN4qve/zeF7fin9fdlhRplRS8e2vI2g09P3sv/jFf7VP+HkdP57m9An2tGdN/iOIDHjQVtlJRqfY7XYGXldHqkEsETv3gkXnpRGYDkYMAIBjR24h6JbBtzBqCjBqirAaqrAaqgCIJUJ4Q314gpJhCMfeuZBNqaEBR+gfI6AuJkX6TrgpbrAgVwqs/1g96z5Sx2CzD32eCoM93Wnc9OYAr/wgk3gv6Owh6Myu7ImFE+z4QzMbPi2xvBrsGr6480o8vSFkchlakxK9VcV/LJm6ER+LXAYAIDAU5qmPbWHwsJOSy+YQCky9/R+gqvJiiouWc+jIfxMKSeW6tbOuord3D8HQ5OW7coWKRDyCKCaRCZlfG7lcRTwRmbEI+OujhHWe+bTkWTx+V2YC8PjTrRx/Os0quvsB6TNT2m1o587h9C9Po51dS6THg9Iqx7hmNW8+HkKmURMTbAQ7kwxF9cRUVnbuLiWps7L1/kwPaew105Bx8ujjNCx8L8lkHLlczYkjj6LV2ZhVdxXHDkkCKbaCedgL59PR+gYDfQcJBTPfV2VRIfb33YZgMCCKSXQNcyl4/+2oSkpI+P2oSksouPN9dP/n/QDo5jVQeI8ksxgbdCDG4yjtNvRLFqNbtJCBX/+O0OlMEkVlYSG2BfNJ+P3EBgZR5FlQlZZgf+8tOP6cbubybd+Jce3qnEZAv3A+gkZDzDFEuLV9nPckN1R5NqKu3A2frp2n0VbZMc4rY/C5qefbLPk1KSNgsJTh/N/eMTwWeYtWp0JAiVDuBFDzQDr+qxDUlOQtPGMUCjDrSsk31FBTsJZoPMCWkz/NONe0ZmJSurHw7tqJTmGm0rQE2RlWMrlMiVI4e33S6eCPH9jJlffNZ/G7KkAmxfBHyN9GkIgmeexTeyekpB6Ltx5swlyiY9m7JYk8jVGJpj67c/lcIxlP0rVnAI3NgLmhkMGd0zOo7R1b0euLMrY1t7w45fP7O/dSNecKkvEoQ31HKCxfhlZnI+gfYKjvKJWzLyORmJ5hOhfQLVyI5/U3UFeUE/d60dTUIFMocL/6dyyXb8T96t8xrV+HTCbDs3UbMkEg0tNLtG/qXlQwIFXoyOUqdHo75rwqGha+98y+QeYueA/xWAiV2kQwICUtxxoAAFVJMd7tO3H+4teoSoop/eLnkKnVdH7tWwCUfunzKAvSJZDB4yfwbttO8OQpQiel3gZBp6PgzvehnVOH5crLs41AgZ2hvz6Bb+fulISk+eJ1WK+/Fs8b24j2SqEY/74D5N98I6qiIqL9Y2L3y6Wwo3/v9FXvym/6EGI8mvKGW//049S+wef2Y9u0kLy1c4Bncg+QA8lEjMLyZcSiwf894aDRkCHLqRk6Eq/WldfkzAOMh3gyQqdTqiiSyQQMajs2Yw11RRtQKbL1Pm035WYLzYVkJIJ3106CcQ+tnn1oFdKkmxQT0yKQOxeIBuI889VD7P5zKwuvKWfWmrSojKs7SPOOQQ4/1zUtAwCACM9/8zBHn+9myY0VNFxeglwpEPHFCLqjDE6xU3kmkKsEop4QoX4vSkPaqNptDRQWLiKRiNHZ9SaBgIP6uutQKLTIBQVHjv05a6yK8gspKVnF0WN/JnBmklu04E6SyTjO4dPI5SpisQADg0dZuvgeDhx8gKYjTyKTySTqkoHM1VjjocenTdN8LhAbHMR88XpAJBEMQTJJMiKF/UZ+AyS8XgwrluHfdwCFyYiysIDYwNSqTEZ7OMGAA7+3l1PHN6e2Vc26jPaW1ygpX41abco1RAq+ndJ3NdrbR2zQgXf7TsS45P2FW9oylftEEeeTT2ecnwwGGX7uBUrn1KGuKM99jR2jeJpFEc+WbVivvxZN7ayUERh5b4wXrM64htxoRDOnDkQxZQT0DeUETkg8Pvq5ZQROjp8vaXnwe+Pui7mDNH1jM3XfvBnDvDL8x6eWd2lvfBVrwRzkCjUtR5+a0jnTwXlpBOSCkvq8iyjUzUItz12X/3L7TwCIupwTumBjoVGaqLStxKIrxagpQn7GtfeG+nAHs0Mg3T/+ccZrQavBtGYNgcOHiXs8IIooLBasV19D73/9InVcJBEYlwl1LL65YPLO6BG8+sPjvPrDqYvVDDR6+Xvjccan5JsZOg446Tjg5OmvHDzHI+eG3qbl6h9dyLOf24W2yJSlsZtMJjh5ajMNc2/B4ThGLBak8fQzaDW5ic86u7ZneAZKpZ4jxx5KTXgKhZa59TcSjQVwDI283yLIBDRGO8l4lHg0hEKtS6k+ASTjUQSlmljwH1MNFjx6DARBinePUQ7zbnsz4/fIYmr4+Rdn3AjocXeQlz+beYtuB8A51Ehe/mzUGgvJZIz4JDHruDOtzZDw+TIMUTI4sXBPaoxhaYyp8lGNQG7MnksMK5Yx/NzziDHJEBmWLUEmCIQam1Ll4Pr5FQQbpbnBvHYuweY+xHG4nspv+iBKcx4xj4uBLc8SHU6XjCpMWkgm6XnoTeb+8A6CrQMETveR8IfH/Ti6/7AFvbEQg7kEmUxAq7fRefrcdgyfl0bgopI7cYY72dL1OwB0CjPBuAeloGF18a20e9OxTMeO3DKQo7FpwVcAGA504Ap00ubYRTQ+tQk62ptpGKq+/Z+0//tXMrZFuroQNFrK7/tSxj6dwsJsywUcHnqRxfarOeR4IbVvnvliOoNHmW1cjQwZLf4DlGhnc8LzJjqFhTmmtYgkOTj8EgZFPrOMyznsmvx/PR+hMBiJ+6fmIXz67VvZ/cBR9v42bejmXlPF0vfP5fnPvkXewhJ8rU5MtXYGt6dj5DLZSL+DeGZFPr0SVmmFn34dj4fo7N5OUeFiGk+nXXdr9SLkKi3RgAe5Uo2z5QCWivkodSbUxnxCw73EQj4QRen3KOgKyql792c59Kts0ZQp3CGzb/gkKmMexx/6VuaukYTnZBP7yP4cx+kKKylcdhn6wkrkah0R1wC9u57H2XkSp0NiOD168I/Y3nMxA0dOo58TJxmMkMiP05LYQfB0K3H3JLoLyWSGPKtE/zG+0dDNa8B+5+0IajXB4ydJuN0kJjh+MsjGJO4dDz+G/Y7bKPr4R+n7mVRBaL3hOpLhMAO/+0PqON/brSlen94HJ15OdT2RrgAse9f76X7modTrJY9/JuNYXU0hupqJdbu7/7CFgrKl9LbtxF6yCI3+f0k4SC3XMxxOu0oKQQN4iCXDtHsPUGVaRpdPqmZR2wqxrbkMpclK38uPE3Fmu7iimEQmE8jTV6BWGEgkY3iCvXhCvSSS01TryRGaAkn4fOy+YHzi6qNYMkJCjKOQKTEo8rCoSliUtwkAf3w4FV6IixEUskni7jIZJdfcCoKAvrqepp9+naIrbkKu1SFTKBh8/Tm0pZV4ju5HplBQeccnaf/vn1J6w/sRlCoGt7xAxNFH+Xs+RCIUJNjVStzvxbxgBWIijtJsJTLYRyIcRJ1fQNzvRa7VEfO4UFryU2MoLXmYGpagNFsZevNlEqEA+Ws3Isai+JqO4zs1MR/6th+8zfovLEUQBPb89hgXfnYxS26v59cXbiYWjON3tuZMDKtUBhrm3kJ7xxaCwSGs1jrmN9yGICg4dfopqiovwWQso6Z6I8PDpzEaSzGbK6mWqxgebqK3bx+LFt5FIhHB5Wqlp3cPHk8HSuUYKUeZACK4u9Isq+7Od17RTq7WoC9+ZyrM1GY7te/6OIJCSczvxt/bgiavkHgo23APPb4VgNDJM5U5M9AtngrkBkPKAHjf2oFz81MZ+yyXbTjrawQOHcZ643VoaqpQFhUS65fCgoGDhxFj6XlBVWgm1Dy1ss6CdVcRGepHbSsiHsw0ikfu+tWM7rO75U1iET/RiI9IePoVjZPhvDQC0WQIpZCuYDGorHij0gcUivtSsXaAoo03SW6Xa4jyG+6m4y+/zhrv9RM/xKwtwaIvw6Iro65IeoBEUcQXHsAd7KbdsZtQbHLq5VBjI8aVK/EfPJh6UGQKBZaLLyF4KpOYazqiMv64C1/MwVF3ukKj1jh17hGl0YJcq6Prr7/HdtHlGOvnkwgH6X95M0qLlcKNNyCTC3iO7sc4ex7+08fQllXR89RDqKx2Ci69lu6//QFVno2Wx6W4pmF2AzKZjJ5nHkFtLyZv+YV4TxzEvv5KnHu2UbTpBgSVOmMM96Hd9J453nbhRnqeeojhPVsJ9UyNC+rwY6dJxpJc8qXl1F1RgaXcyN7fHicWlNx1hUENchnhMVQPbncbbe3p9+50U2aI7XTTc8Bzqdd9/dm9A4eP/DHjtUwm4HRmNuY4m6efLDwXSETCBPraUOgmjrnPBNY5KxAUSrydJ2l78feI43Dl58Q7YAAAtPWzEdRqkqEwzicy8wK5wjozgRiP49+9D/OlF2NcvZLhZ6SqNv/eTBYC/ZwyPDtO5RoiC6G+LlRWO6HeDnzNmXmjyMDUqd1Ho7hqzRkKaWmR6eiZOiPvVHBeGgF/zIlFnW4CqzQuYTDYQjwZxa6tJppMu4Qxr4twv+Q1jNcnkEjGGA50MByQJiKD2oZFV4ZJV4xJU0hp3iIq8pcTifnYemridm7nM09T8dWvYb/5lpTGsFyvJzY8jPOZzId1OqIy7mgfNnU5i/MkfWVHZGqT5ghiXjdiMknx1e9BrtMjxuNEHFLVQ8w9jMqSR8znRWEwYmpYwsBrz6CvqsO6Yh0A0SHJyCZjmSvska7HZER6z5PhEGI8TjIsxW+15dWU3vD+jDFGjh9P5GcyHN3cTDyS4NKvruDkc23sfiBNH5IIxlCZNCTys5P45xJFhYspKlrKocN/mPzgfwhEmp76xeSHzQBqs5SM9bYdn54BeAchO/PsJHy+LEOjX7zwnF3Hu2MX5g3rMSxdTODQkZxloYlAhIrPX09sSJpf+v6YrT5YsO4qBt98EV/T5FQ300UiHiYW8f/P1xgejT5/I+XG9AdtUtm5pPwjxJMR1HI9bZ70akxQqCi95nZiXhcKoxn7hVI4JReR3Aj8kSGCUReuYBc6lRW9Op/64ktRT6A9PIK4x4Pjb39DO3t2ijU03NrC4F/+kuFCAlQYF6FVmAjFPcSSEQKxdFKsTd5E0dpraTr2JsHhHswV8+gN9lIwt4aBY1tR2fLxE8Con4XalM8p9zF0+aUIChX+gVzlkRKBXf8rTyLGYxhmz0NbKpVxKi1Wom4XvlOHMS9YgUypIuZxEXEO4D68Z+wwY15PvNIL9/fQ93y6/towuyH7zhLjdxUvv3tu1rZkUiQWiHPqhXbqr6zC3e1PxWRPvt5PsM+LoTLNEe8YOoFjaPza6c990Uh5pRytVuBH3/OyfoOG3/3aj1ot45HN+bz72iE+90UjdXOU/Oh7Xk43xvnW/Z0cPdxM3Twdf310agnLf1UIyjMT7lnQh59rjJSwKm35qKsqibR3gEyG8YLVmDdees6uE3c6CZ1qRDt3DuYN63OWhQ69sB+ZYuJGQLWtaML9ZwO1No/BrgMZBQjnErKZNric05uQyd7Rm7h03udRjKrTjycieMP9qUYxb6iPYPSdJRJbaLuCI0OZKkUF89YxePxN8mevQG2w0nvwFUqXX42zaR96ewVqYz5h7xC+3tPEQj6sNUuIeIcIDHVljW9ft4lARwvBjmZkgvBPXdHd8rNVDLX6eONnJ1h0fQWHnx6fK8VQqBt3Xy74B6Y/IT/zso22Vimc1NWZ4Eff82G3C3zt22a+9x9e1qxVc8fdOtpa46n9T71o44arplZxZiitpfqKu5EJckJDPYjJBGqzDaXBkpEEHkkMBwc70dnLCQ31kIiG0eQXIyhUnH7ip4SdmR6jde4qVHozco0e27w1yOSKcRPLMplA5cb3YaldTDIWJeTsRZtfjKBUE3R00/z0L1M6EWpLAQVLLgHAWFaHypiHv6eZiFcKW4aH+3AcPrf8StU/+T5tn7039broEx/BufmpVIWQ9fprMV+ynrZ/+7z0/ygVmDdcjGHpEuRmM9HeXrzbthM4fATbbbdgXL0ydexIxzCQ2pZx7Z/9EM9rWxh+7oWsfQgC5V/7Moo8S85zyz51NYGjHSSCEbS1xQw8eu7eF0GtRKaQkwxFpl+uDYiieNYkXuelJ/BOYDjQgTfUjzfUS5/77DruNNU1KKx5OUvUfHv2UGtZDSLolXmE4h60CvOo6pU0Bo9LD5OzeX9qxd1zQCrfC3uyE9zDreOXY/oaj2FffyWWhSsQ1Bq6N//3TP893vOd+Tz+5ZknO1/70XEu/qS0wq+9qGhCIzCTSX26OHE8xpc+lxmPveFmHVqdjJ7uBK0t8axjpvp1VOpNVF9xN3K1liO/uy8jnKa1leY8R2W00vi3HxMakirPBKWahfd8l6JlG2l/9aGMY4dPpj21vLqlKOTjf2ULllyCpXYxvq5GOv7+Z+LhAAqNnqpNd2IoraV07XV0bZUEfiLuQbq2SDxH1Vd+AJUxD+fJPbhOT72Ttb54I13DBwhGJA9Xp8pLLaZqC9dlNGkCGQYAoP+Xv8n8X59+jvCLaf4tMRbH/cpruF/JLom0bfeh2rMbs74MT6Cbau0StD/bjVyQCihml16KVp2HXFDS1PN6zsk9hWRyQm814QsRON6F+aK5KPMMyBTyaVFBj4VMkFH3ndswzClBUEv3e/KzD+E/JT0PCqMWZb4BMZEk3PXO9xedl0bg4vJ72N7zp5yc/4JMTo15BXqllQ7v27gjk3c+vn78h1nbpJLA6Vtepc1GySc+Me5+3549+KJSbbAvJv32RAfGPR7IDLnM0DMLD/TQ9dfxCc9GoM9TcsmHpCqTPZt7WHRFIRqDgo7DHlr2DrPpk7Uggsag4JIPVSNXynj72T7c/WE2fLiajsMejr468f8z3Jm7VNC2+CLiQR/etpPoS6qJB32EHOdOeEaCDJ2xALki7fn19rj4+QNSv8C2NyI88dcgt9+p4xc/lu7z7f1R1q5T8/MH8lL7pwr7wvXI1Vq8naey8ikjk/xY9O58NmPfyOpcX1Iz5euOhaBQUrDkEpKJOB2vPUI8LJVAx8MBut96ijm3fgHrnJUpI3Au0NiXLpdUKwxU2lZysnfmZczTGcNqrGb/6T8RjQewGMqRCyqOtG5Gp7Zmva4ru5xDLePr/6orK1Da8jPKV0fD8fQe4u4AcVeAmMM7oQEov/EDRJwDDG57AcuClRl6AgByvYbar96IaVHluGOoCs3M+4VEl7Hvyu9O9DacE5yXRkAjN1BhXIxJJbWQj66vr8tbS6VpKfFkhELdLHb1PYYvOjW3XSGoKM9fyqyCdcgFJYlkDH/EwaD3NK2DUxN8yb/uOpzPPEOkqwsxkZvnZiDYIh1brMLrjGHMU+IeilFYoSYWEYmEEphtSlwDMaKRJOZ8JQFvnKUbLJzc68PteGcSQABrb69g11+6cPWGuekbDSjUAo/dKyWz1t1Zyb6ne1h/VxUrbijBMxjG2Rliw0eqeeY7jTz/g/E1e0dj05cWkl9l4NpvLcXRnE7Wa/KL8LiHsC26EIXeRCISzDICcpVAIpodylIYTCRCQeQ6PclwCEGlRiaXkwgFMdQ2EOxsIR7wUb/0VtRaC7Fo2hD94scPZ423flWmp/WLH2dWG904xVCQqUrKgTiPTV0wyN2au0xWoZ151Yu+qAq5Wkegr414KNMIh4f7SSbiCBN4ERNhSdUtHGz/K3n6CrQqC4lkFK3KQrl1KQc7/oYMgVmFF2LQFLCg/DoGvaex6MtZWHE9GqWZ5oFtDPvbWVRxI4KgoLHvNfTqfMzaYrqHD9FQehVN/VtSYxSa5zDgmbga50Tnc8yruo5jbU+h19jIM1SwsObdADi9LRmvA+HxOf4BTOslJbbxaCIUFj3F778EmUKOZ+fE9zWRqAwymPWld6UMQMwVQJmXXeAQbO4n0u9GXWTJ2vdO4Lw0AiBN9pFEAFFMUmpooMcvhXCKdPW0efbR5tnP6uLbqDIt4+jQ5CsHg8bO0spb0KrSb6xcUGLWlmDWljDka8UbmrwWWF1ZRf8fplYxkmdXsv6GfOxlapoO+Wk9GuT6jxbw0He6qJ6nY/ZiGUFfgqWXWGg+HECleefVPlVaOeFAgmRCRK6U4ekPZ+yLBBIkkyJqgwJXb5h4NMkbv50eT8/xl7oZOOVhqM1H96FRHaLRKIJSha6oArnWQKCnJevcK757AS98LlvD1Th7PnKtHpXZyvCB7eQtXo376D4M1XOQKdNVSBpdHoe3Z9ZjWzZdTsLrI9bXRzIWQ1NdhXf7DsyXXIxny1bUlRWoioqJDQ2htOUTHRgkGQyira0l2tuLsqQEhdFI4NgxNNVVRHt6Cbe1ATLUFmmhEhxngRohNgAAIABJREFU1Z8LYz2GEeQKGU4VmjwpMakvrmbxx388ydHTgygmUMjVWHSlqBR6Op37GfCcwqgpAMAXHqDdsZvivAWc7JHyXsWW+RzpfBqDxs6sgotQCGoOdz6JVmVhTsnldA9nhjZHjzGZAQBw+7s42PwYVYUX4A504Q31c7xdauqzGMozXk8Ew7IlGJYuRozG8LyeW2Y0/4oldD/wMmIsTtnHrsS7r2lcUfiJRGXyVtdhXiZ5e4du+xkxd5AVL30p57G+Ix3/ZwR29T2KJyKFHTZWfiplBDQKA97oILFkhEbXWyy2Xz2pEagr2kC1fQ0dzn2c6s3NNLppwVdoH9pDY9/ELdnR7qnzrDcfCdB8JJCS5BPkMn777+2ISdjxXHpy3P+6GzGZKd0HYDhDa+APjB/yMhlKmTfnZnbt/+m4x4zG8z84jUwm3ctf7suM+7/2QCuCXJbyDADkChmJ+NRCVNYKaVUTHI7QeYa2+obvL+epe6UVlq/tOHlzl5OIhklEw/TvzCZw69iR2xC7Du6U/pDJQIS+V58AINTXmdGwFIsGWbnxS/g9valmuz4GIJFAWVCAGI9BUkRVVISquARVaSlykwm5wYAYjxM8cZKEz4d5/ToSwZB0zpmqL1VhASTFtAcok8KKwDtWLz9lnBH5cbccpv2VP53TofvcJ1hUcSOhqBuZTJ6Tgj0pJlLxeAB/WPK04okIckGVJRebSMZQyDXo1bZxxxgNQSlHna8j4gyismiI+SKoTBo6nbuRa5R0iG8i1yhQ6FS4h7tw+7OLJ0aj8J4PoJ1bT6yvn8E/PULg4Pi6G4HjXdiuWQ5ApN+F7V0rcTyZm69MV1qFv70RXWkV3U9nfg4Vn5C0idt//hIx98QhR++RTmyXL6Jg/rqM7cbSOlpemTzsOx2cl0YgkghkNIsJCCgFTepBkiGtmJJifEqyjQWmOhLJKE392fW9I0gko9iNsyc1AkPPPE3+u67Ht3sXsWEX4jirutEYmdiTidz3OrJ/LP/Y3Lob8Pv7Odl0bkmjRBHEce5l7D1O1QAA3PbABfQdy5wgiuenVzPmusX0bHmCZHz8cFfF6iKOPZntIaSQa7Idta2rKfsz9rkyDcUI147j0UcB0DU0EDxxgmhPejXv2fZm+pwc545cN+IZQm22o80vJhaYWTPQuUDYJU262vziSY6cPryhPgyajWc8ZRlKuZbawnVYdGXUFq7jUMcT+MMONEojiytvoseVHe5yeJtS4aDTfa8Rinqotq9BNCZT3+uRMeym2Ti8meygxetqSEQTmDZZ0RUZcTc68DQ6MNcXMHSgC0udHblKTuW18zjy421Z1x+L0bQQRl0RGxbfhyfQzYGmbLJB91tTLySZSE9AaZYq4SL9k3f9jngaEe8Q0VHPlcpoHe+UGeO8NALD4W7mWNfT5NpJUowTF6OsLn4PobgUtzUoJf4Mo8pOJD4JXwmgVVnwhwdJJMcXcwhEnBjOuLcjMC5aiu9wZmdpwXtuRV1Zifmii3KOM1XBmanAaCjB7//HCaecLQ492cGOBzPzBpvuS/d7xHwudCXVxAPS5zi2HBIkQZULPrWIg38+Rcg1/bp1n6sTkKVX6CMYbTzGlM96tmzJZK8ce84E53o7T2FfYCe/YTXezql1lb4TCPS2koiEUFsK0BdVEehvP2djh6Jutp3MbKIcm7xNign2tz6aej0yiYdjXt5ul5KyhzufzDjnQNtjE44xGv5OF0VrqwkO+PC2OFHoVLhODlB900I0Nj2GyjyUJg2JcIy8hkJcJyYpxsiCSPwdpgJPRmLIFXLkmsmbKEdUyDxdJzOev6ET5z5feF4agdOuHawovJElBdcCsKP3YYr19eRrKjg29HfmWNeRJEG1aXmKQ2giJJNxhHHczBHIBSVJMdNIjDUAAJHeXiK9uUW0zzVk0yRB+2djrAEA2P67NO1C1OOUyibPzLe5jIBCK2f53XNZfvdcooE4yTGVGL+9ZGKvqHLO5RSWr0Ch1CKTyQh4+zj01sTyomI8nsUpP1U4Dm8jf85KzDULkQnyjIYepc5ILPjOUWuPRjIeZeDA3ym54DoqL3sfbS/9gZBz5DmVYSipQaEz4m4eP+wxXcgUEo/SePHxcwlP0xDeFidiUkQmyFI19W1PSN//Uw/uSana6cumF0v3Bft549D95+Q+J2I0jvS50dUWoanIh105D0nBvHyW9McYz1dltOYsHz8bnJdGIBT3sL33YcyqAhSCGl906EwFULoCY75tI0Ohdlo8e8cf6Az8EQcWXRk6tTVV0zwWerUNV+AMZ/i8BcgEgcDJ4ymu8xEMPbE51+mTQi5XUVF6AZXl6xHFJH5/H919exhwZLaZW8xVVJSuxWiQ3PqSomWUFKW1ddu7ttLSnhmyEsUkcrmK6opLKLDNQ602MzzcRGvn6/j8uWLsMooLF1NStByToYRgaJgBxxE6e3aSHEOoJwgKLln7DQaHjtPetY2aig2YTRXI5SoiEQ879/8ka/Trv7sMc4kOd3eQ7Q+eJuCUVvTu0+kJyFSd3VkMEHCEaH594njuRMiz17Pvte8ye9FNtJ54geqGq2Y81lQQ9Q7T/veHqbr8/cy/+1up0k+lwYzabOPQr2buGZprFqI225CrNNKPUip7LVlzTSqv4jyxO5WjGDy0DZXZhm3eBdS/53P4uk6j0BpRGfOQq7W4Th+YkhGQCTIEpRy5TkUyEkeuU5EIx1DnG1AY1fibBpHrVMjkApZFZQy8/o/xgEYm/nGbqs5sDnSfe5K1qWIiURn3vhZ0tUUUXrucvsfHtwKW1bMxLakCyJkT8Haf2/f7vDQCIMX7XZHcK+5u/zH6go1TZgDtcR3BoitjccVNHO58gsAYQ6BXS+Glbpf0BQkcP4q2ehZFt99F30O/P+ukn0plYMn8uzHoC3G5WxEEBSZTOfPNVVgtszjZlOYcEmRyYrEgw64WSoqWEQwN4fakeYS8vuwqlKSYYOmCD2I0luD39xGOeLDlz8GaN4t9hx7AH0i7xjKZwLz6mym0LyCRiOLz92HQFzGraiMFtnkcOPJ7EonsMIxKZWD5onuIxcP4An0oFVr0+tw0uHsebmG404+1wsAVX17II/fsQFdUgcpsQ2WU6vX1ZbPwtmXHWl/8wsSlloJaRTIaG/czSSSiKQnIeDSIahKRk3MBb/sJTv3lB8y65sPoCisBkXgogKft7NhFC5dccma8TBQsSTNoupsOEk+VKot0b9uMt+0Y+fPXYqqYQyIcJOJ14utqxNU4NfK7oivm4zvdT/FVC4kMeIkHIgy8cQqVzQCiiLY8j+KrFtL089dn1OX6PxkTicoMPrufwutXoMw3oKspINiauaJXmLQUXL2UkveuBSDm9P9DcgL/crQRgkxBsb6eHv/UhVUA5IKKuSWbKMlbkBVmEcUkrx3/PklRcuU1FVWEO9tzjlPzwx+New0xHqftvi9mbDMaSli55ONEYwF27v1hhuEy6ItYtfSTbNnxDZI58hWXXvRtevsPTJgYNhlKWbHkYxxv3Ez/YHqVZzaWs3zxR4hEfWzfI7m6gqDkwlX3IheU7Nj7A6KxtKaCQV/IqqWfIikm2LL966ntI54AwOtv/fu49zEa7/rOMjx9QfLK9eitGjoPDPHmr08hk8tTnZkqi42oe2q1+KOhyDchqFUk/EES3vErLARBgcVei8/VRSw6Ne2I0bAv30DRhddkbEtEQpx+6H7igekJxtzz8AV4B0I8/vmzF+BR6xXc9J+L2PGnVlR6Be7eEI7WyfNi08aZ0ErBhjk4tjSmGitlMplUjJHjG6vX2Fg15x7kciUDw8elhYLGhkZlpn1gF6e705V5aqWB5XV3IZPJ8AUHUCl1WPTlyGQCrx74Zta45fbliIiU21fg9ncSjQXQaawcaHqEWFx6DuaUX0FFwaqs8wEuX/Z1hn1t7D+d7sguti5AqdBh0Ngpsy/D7e9ib2N2+feskouZVbyeeCKMLzRIJOajKG8eAMfan6bXmWb1VOXZKbjoSrqffYiy6+/MqhACsKysZfY3bx73rY+5g7R+72m8h7NJJM0VDXg604un/5W0EWq5jgW2y6dtBBLJKMe6n6N1cDtVtlXI5WriiQj+iAOHtyllAABUBYUkAn6S0YjEYjgKPT8bU4opCJKy2BVX0vvL7NizzVoHwNDwqSzPxR/oJxB0YDaW4/LMXIReRMThzFxVB0JSvbJKmW5GsZgqUCq0uL0dGQZAupfBM7mTs38kTr0meXB9xzPdclP1PDzNUgx3PAMw74ZZE47dNaRHFEXU5XaGHhu/2iuZjDM8cAqtwT59IyCTYV+ezVcvV2uxLljD4O5/nrhPQa2BLQ800XfqHVYuOzPJD76RGXqYaNFYZl+GQq7iZOeLdDnSdMxGXVHW8zav8jr0mnz+fuBbqQo/k66YlfUfQKvOIxTJ5PIqzJtHPBFhx7H/ylmiCtDrPExFwapx76/XmRkK6xs+mrq/MvuyXKcA0DW4F39wAIfndGqe8Bb2Ule2karCCzKMwER9AiNw722m89d/x7KqFt3sIhQGLcjAd6QT954mBl86RDIkJan19grUZhsqg+RBG4pmZRiBc4F/OSOgEGZGTzyCYNTFid6XJzwm5hxCUyG54b6DmVwqka7seHWkowPj8hVYr7kGx18y29N1WikLGgzmnvSCIQd6XcFZGYFoxJclcj7iWYxuQNLrpMYmi6mSSy/69oyvNxkWXV+JpUSHuzfIaz86xnCHtFLVFVeljMB4uPSrK8bdl4gm+c1VLxMf9hIpzVHNkwOV9Rs5dSB3xcl4UJttyDW5ie10hRXTGmsE50p+WG9VM3D6HyNdOV2MeNhZBRbBMULuGjs282yCkeGMEm9vsI8e50FK8xfT3JvZuKVWGjja9sS4BmDkfH9oEIPGjn9Ul7DEDhBlwHVyRv9XNB5kwJ15bsfgbmaXXopek/kcFm28EVW+nZKrbk3RsOfCwLP7GXhWCs/JBElHPVeCPex1YKqYi6tF8iLl6ukRLk4F540RsGmrpnTcSHkogFFTwKz8C2h17kKl0DPkb53gzKkjEQwSamtBZS+Y/OAzCB4/hvXqaxi7DpDLpWTe2Ek6da1ENHXMTJHIwbGUC3K51HsRiXjxBaamlDQTvHr/Edw9QSylOi7/4kL++mmpsSYZCVOx6XZifinG2bfj+axz//K+zGY+QS7DWKRjzccX8rcPvg5JBYX3XE0yEsPxUOax5bMvQaHUZmwzWMqmff+CWjOjfRMhEU9y6SfrWHFzBT3HPDzzzaN4B9Pd2kV1Jq74/Bwql1pJxEUatw7wt/vSK9dbfrCE2jU2dJbMRdDPrt2Go00ysrVrbFz2qXqK6k1EgnF+fMUWIoHMCXnWahvmYi0Xf7gWc5EGd1+In1y1Nes+yhbm0bh1gBfuP0HQNbXnq2/4GOUFK5lbcTXeQC++UO4yTatJ4q4a9rVn7fOHBrGb67K2xxORnMePRa/zEMX5C2nqSQsMFVjm0O86MX0VwQkgikmi8QBqpRGZTEg1JnpPvE14oIeoc2DcfoGssZIi41EWJiIh+g++lqo6Gzo5SVnRDHDeGIHlhTdM+5xS83y6PUdQCGrMmuJxjYAgUyCSTH1Qk8Fy0cVE+3qQG004X86eqHJBplBIjURjEE9IX3S5PLcHI5erSSRyE1eda4wYC4+vi6MnH5vk6JnD3RNM/Y5H0mG2oSPbs3Rex2LwRHb1Vv9RJ3OvqebCf1vE6995G/drB9DNzU6YBn0DVNRdRk9rmnbCYqud9v0nI+N/HonwzFhPGy4tomXXEH+77xA3fHMht/1kGb+5PZ0Ev+ehNbTtd/LnT+5HpZOz6f9l6iy89P0TKFQCNSttDHUE8A5IIj/eAelea1bl8/7frOTtp7p55Sen0FtV3PGrFfzh7t0kRyVv19xehUIj54XvHSfij1O5NJ1otJbpUvfxxJcPsen/zeW9P13Gg3dObeLxBLo52Pwoc8qvZE3DR/EF++l07KPPeTgj3KpRmQEosy2lzLY0axx3ILsrfyIPYDT6ho+ycs6HMoxAcf5C2vqzqUimA5uplsK8Boy6ItRKA0qFDkGW/Sxbl607I6a0AIDOzWff3asvqMDfL0UKFFoDEe/0c2kT4bwxAgBv9fwpQ3glF4wqG2tL7gCg2bGDUstCFIKKXs/4lRgb53+RAc8pDnU+Me4xF9Z9FLmgZNupX+DdtxtNWTkJX7bbPV5iWIzF6Hvwd1nbO7repLhgCRVlF9LdtyfDIzDoi7Dnz+XYqcfHvS+FYmYrz1zo7dtHzZkyUrOpAo93fIrns0H9hmKslQaGWn08eW86NjwygcoEgYJVlzOwa+Kw3Gh07OpnzScWsndLBEW+iZgjuzvX2X8CZ39mvNTRM/26+IjbQf/257MSwxGXg66XsztKp4KOt108+hkptPjTa7fyjQNXsurWSvb8RUr+ndw6wOZRK/+m7Q4uuruGt/5bWtj4HFLFln84gncghKsnU3D9rt+t4vVfnGbb75pT2666t4Fr/n0ez34r/d1w9YZ44bvpfFr7geGMMUbfR9N2B18/cGXGfUyGIU8z2z2SAppGZaK+bBPzKq/NSMpGolKercuxn5OdOfj9c2CqC7hIzI9WZaah8hpOdDxPuX0FNlMtbzc9MqXzc+HyZV8nGHGx99SDROPpRcCGxfehGOPFdz/70NjTsyColZTdtR6FSTupWM3w420ULLiYsKsfURQJDnUTGGif0f8xHs4bIzAQbCKSmDyBN5peusBYS8fwPmTIqLVfRJNj5mIP8UQ4RS6nKizCvSP3WN5d2asiMZHAs3UrcXe2ME0g6GDAcYRC+0Lmzr4hNeGr1Sbm1Ussh7kqg0ZgtcxCozYTjpw9JUEiGaOtaxuzq69gXv3NHDnxyCheIhkWcyVqlTGrd2G6WPSuCoZafTRt688QlVGZrAhKNTJBQGOduhKTXCmw9I56nC1uPFsnntSLKlYy2HMwJcU3MnnYN1zN0LaXJ+SNHw3H/jdIxqIUr3sXyVgYb8sx+re/QDI6M/WtaDD9GccjSWKRBHpregJZfE0pi6/J1B/Y+fDU80SCICPozgzbBFxR9GPCR4Hh8e9fZ1HmvA9jwcwWIuGolyNtT7DBPBuLIZ1Lcfokg5Jvmjl19kSIJcIUWho42fkihXm5+1Gmi0H3yQwDoFNbMwzAiKKh2l4s5QLOJNDHKhyal1ZT88V3oTBlhi3HQ8t3nybidRIcmjpn2XRx3hiBg4NTC7tEEgEOOyTiMX/ESZ19PUqFjm732YkvKxXphIsYiWDdsJFkJJJlDGbSLHaq+Vm0GiuF9gWolHpkghyTsQxBJqd/cPz79vi6MBvLWb3s3/D6exDFJIOOY/T07xv3nMnQ2b0DncZKafFKVi39BMOuFlQqAxq1BYVCQ//g4bM2AuOJyuiKKlAa8oAkjre35jz302/fmnN7PJLg1a/tyblvNDT6fJau/wwuRxN97bsI+qS4dLive0qdrcUX19L/ZgtiUsR5eDvOw7nDCCWX1tH7+tSotQHUhvRXTaEWUKrl+IfSE/LRV/p4c9QqHiAwPHUag2RCzMoX6PNUdB2ZumJeyBujaefQjO+j0DIXd6CLSCxdsmrSlSAXlIQi6XCOPzTIoLuRAks9gqDIWAQJMjmCoEyFUWeC/uFjlNuXU2iZS56hEpd/enrduaDX2DNeN1Rmeonhvq6M37mgKbVS+7WbUkIy04WprB6Q/e9pFhsPSTFBX6CRYlPawsuQoVNa8IRmTuegU+WlKgqS0QjJaBRBOzVrPRni8TAHjjxIeckaaiovJSkm8Hq76OnfP6EROHTsIWZVbcRunYPFVEkyGaO7Nzd74dQhcqr5WRzOk5QVryLfOptYLEQoPIzT1ZzRazBT5BKVKb/8NhDP5E6SSdR5hQT72rOOO/ZEc9a2RCzJ2w+dwtc/eTy+/eRLdJx6BWtRA1Vzr0CQqzi263f4Tk6+SDDXF1D9niXoyiwMH+5FY9fT90YTs25fRudzx6m8YQFKvRrXcSmpbq6zo6+0MrizjboPrabnpZN4TucuESydZ0ahEohHk9SslIob+hvT4caCGgP9p30zbr5qPzBM3bqCjHCQqVBD296Jw6uj0brHSdkCy4zvo6ZkPQZtAYGQA39oEI3KjNkgJeabezPLeY93PING9T7Wzf8MvlA/8UQEtdKIQVvArhMPnJUR6HUeoty+nNrSDchksowSztEotS1FKVej00ifh0ZlpqJgpSQ/e6bSCCAaD2A3z2ZF/V34gv2oFHoEQYnL30neGQ/H15JdtmmclemFFN24MmUATnzmT4S7nCSCk3uW1tnLiQW9mMrnIhMU/2cERhBNSBOCM5jbypfmLaS28OLUa5uxlvVzPp3zWOWZqpkR9sPASSlmalw6frnidJFMxunofouO7remfE48HqKx+VkaeXbcY7z+npw00slkfMLmLqerCaeradz9Ux0nF3KJynS9+hgFKy7FeWQHyWiUghWX5Tz3jf+cWlfrpBhpbgIKLrsOgMHXxn8fATyNg/jahml97G3ERJKaW6Wkpb4iD0EhYCjP49C3pYqk+nvWYKzJp/HBXeiKTCj16nENAICgELjtp8vY+XAb131tAR0HXXQeTq/STQUa3vvTZez7WwdhbxxzsZaW3UNZIZ7x8NrPG/ngH9dww7cWcui5HnR5KnqOuTn+96lXgW39TRMf/+tFvPeny3jr9y2Yi7XUry/gxftPTOk+2vq3U5K/CKO2kMK8BqLxIA53Ix2Du3H5Mr+nsXiIvaf+wIr6uzDryxEEOZGYH7e/k0js7PiWPIEeAuEh9BobiWSMAVfunqJ5lddmvNaoTMwplwRhRje37Wv8I7NLL8WiL8esLyMS9bLzxK+pKlqbMgK5YF6wIsM4mBZXAeA93EGgceoLVplMRunKa+jd9yL59eP3QcwU52XH8BVVn53w+KSY4NWOnzOv+EpcwU5iiQhmTRHNQ9muu1Zl5qK6j+MKdtE8kJtiNpGMZwjKqMvK0dXMJu714Ds0dc3V/4OEsdxBzjbpSy3X6MmbuxxBqcLTfITIcI4SwjOdqjNFUeUqHN0HMxLwarvEwxRxTD4hVrxrPvqyPPq3NYMoYl9VhTpfx+nf76bq5sU0/kbSNSi5tI5gr4eCC6rpe6OJovWzcJ/ox7H3nUm2/yNRcuP76X1y8gTnTKCrrCXYke3tnevxNlxrRG8QaDsd4dgByasor1Gx9AItTccjeF0J9EY5yaTI/GVamk5EOLY/lDXOdKDQG1GapWorMZEgMtSfoT647MnPIWhVnLr3EXxHz81zci46hhFF8Z/+g/S1T/2Y1YUZPxZ1sVikrxOXFFwrXlR6l6iS60RArCu4RNQoTWJ1/ipxXtEV4thxRn7Wzv6wuLjipnH3j/0xrVgtAqJxyfIpn6MTjKm/7YpysVa9ZMrn/k/7KW6wiGqDQixusIi3/27ttM4tW16Qc/ui98wW3/PQxknPlyvUWdsKL79eLLz8+infg6CUp1/LZnDOv/hPyY3vf8fGrrzzU/+Q8W77SJ4IiO/9aF5q25yFGnHtRr1464fzUts//EWbuPF6o/juuy3v+Ps6/7cfFle89CUx78I552zMczH/npfhoBFFsQxE+ugPnGZZ4fXU513E0aFXaB/eQzQeJBIPEI6N30XpCw8gyKb+r0YH+rBcuD6LMmIiVKrmcTJ8tvH6/xnoO+FO/fY7zk0PRNgbxVpjpqxaRSiYZMFKHVufy/7M56/5EIff+mXGtoFXn846biIkY6MqiMQZnPMvCNu6TehnzSHudSPXGwGwLF2DqWEJCDKCHS0EWhuxrr4YMZFAac4j0NrI0LaXKbrqZlRWO4JKhb/lFEPbXqbs1g8RbGtCW16NwmCi69HfUHTVzWiKyyi79UMAdD/+e4quuAltWRW+xqMY5y5k4JWnUVltGdcd2vYyZbd8EDGZQKE3EvO46H36EdT2oqzxRsKAOoPAlTebcDkTVNWpUChkLFihwedJkkxCV1uUuYs0tJyMYDAJKW8hFyouq0WhV+JtHUZl1tC7vYO8OXZm3zSPxseO4GmdWt7Fs7cZbXk+ltW1uLb/87QnxuK8NAITYTDYQl3ehQDoVVai8SC9nmNYtON3hrYP7UEhTL0rV0wmcW/fhqZ8ahQBRrmVfEUJC7QXMRjvJCkmscgLWKm/iubIQYbjfSzQrkNAoDlyCJ1gpFRZS5IEGsHA3kC2zOJ40FQXUfn9e+j44oOUfuEWZCoFA799gaKPXUsiEKH3J08Qbu5BJhcwX7IY44XzUVcUIDdqcb9yAMefXyMZlkIlijwj+TdeyMDvX8q4RuV3P4jCYqDl4z9Pfammg7EEcus+Noc3f312D71cJUcmyJi7RIvBLOAZzj3pRsP/GP7+qaLauJSe4KlUDut8hCq/AMPsBtr/8FNARs1H70WZl49p3lI6H/4VIFJ++8cItDaistpo++0PAaj6wGfwHnubgVeelEpvZQK1n/p3hrZJZZFiIk7P5j+mrtP37KNoy79C91/SDVSBttNEnYMIGi2Drz6DvqYebWllxnU1JRWoC0to/dV3ERNxKt7/SdT2QiKOPuIBf8Z4I/AMJ3jlCW+GBlDziUiGMBzAycNhBDkkJ7DhuiIDp/58iDnvW5wy9u4mJ+5m55QNAED/k3uxbVyIbcN82n44tWrIfwT+5YyAIJMjQ0CGjDxdBe4zFUFFpnrcoXQtrWVVLbbLFqDMM9Dz8JsMH+6g7K6LURdb6H1sB2XvX0/TtzYz75cfpPPXr+I7li7t0lRUEenuQlNZTbhr8tidLzGMM96b8gTsinLiYozm8F5mqRcxHO/jaEgqNa1RL8KXGAZkHAm9iUHIm/Z7IJPLKfjAFTif2oH12tXkv3sdjkffIP/6tRTevYmOr/wBMZHEcvkyYoNuhp/ucxZUAAAgAElEQVTcTsIfovjTN4AgY+C3UoNO3OXDtH4hgw/9HTGWjl1q68sZemzLjAwAjE8gNx50+Rq0eZKRNpXoya81Zx2z9I45DLd76WiKkBRBPk6PjXe4neKqNXiH21P3H/D989TZfLEhZplWIkPGULgDR6idsXq704FcraVo7dWo8wtRmfORq7TIlEpiXpdEG+0aJNDTSqCnNXfOJQdUeTYig31n3i+RiKMfta0IldVG+e0fzTg26nSk3tfIYD+qPBvWVesRVGrEeAxBo5W4cIBgZ9uk104E/ci1OpKJOMl4DEGhyLquoFIT7u9OxdcTQT+CauJF3evP+saKwAFZwnDStkmcOKVOSfXV9URcIcSkSNVVdbS/eBpNvg5jpQVfR+ZzLpNnMwcAxFx+Tn/tr8z+6k3U3Hsdw1tPEGwdIO4NjVu+/I8Q7DkvjcBEieGEGOfAwFOIiAz5W1PNQKcGXs86NtTppPM3r1H5qStQFVowr6gh3D1M/iXzCHUOYd+0iP7Nu7FtXJBhBDw7pQoe9/bJtUpHIB8TbvInXcSJIpcpKFbOQicYaYkcQo48tR8gzswk7ZxPvEXgYDNxt59Y3zCRrkFkgkDhh69OaeK235vZwayuKcZ6zWoGHnwp9W1IBsKUfeW9dH0jnQgMHGph6G9T+99/vrmcT787sza68Y3p8RIFnWHi4QTlqwopaLCiMoyl2BB55pNbUyWiC1bquOXDVr724e4sYraelqk1DC74zI8nPygHmh75EWFHtqbDeCg3LCCWjNATOIEr0pvSxx6N+f/2wwyiv7Czn6aHv3/mlYyClZdRsGojMvn4X1eVOR/M+WgLy7HMSTNihh09dDz330S9469Y/c0n0JZXUXn3vxFzDyMT5PibjuPYosO8aIWk5nVGrlOhN1J6050oTBYCrY34m0+Qf+FlJMIh4v7/z957h8dRne3/n9netasuS7IlS7Ll3rsxLhgbjIMhIZRQQgkQEgiENMKbQEJICCWhk/AmtNB7M7jb2Ma9W66Srd6lXa12tX1nfn+MpdV6V82Sifn+3vu6dGl35szZs7NnzvOcp9xPEH9jJ4F7mhIhiSLu44fIufnnBJ12qt9/JS4raeP6L6I+11ddDpNnxR/7af21w9E8cOa54+8V4XfEOo0PPB8/b2Xy57+Oe7wzkuaNImneqB7b7bzoLz0PsJ84J4VAvJKRoiTiDbVS5zmO71St4VZfDxpepwnmq2rGU1JP6d9lLdg2u5CUxeMof2YFplHZ/R6zTjAyXj+P6mBspEJLuJ7BmkL0ChN+cWDMApL/FBmWKCL6ZUHSwfmuEJDCErq8QdgWT0FXkInKakJplvMeBCFi6m5Zs4eUa+ajTrMRrHegK8jEubb3vPc/u+LMq4B1RqAtyIl1VfhbA1Tt6rp83syFJiQJHrititQMNfXVsaRgZms2SpWWluYTcjJSeODrsvYWRfY1BMVILHhvdgHaxFQUKjWSJDF4yQ1Yhva8WHQFXUom+df8nPLlr9BW2XVUTuP6WJOk88BOnAciiYn67FyCLmdM5FD5K0+ffini1lfxN8be9/qVkTrDg4aoqSkvxVsZ2TG0v+78uQCJG2pxaVIIhL0oV+7F6yonwzgc34ZteKXNWLUZ2LSDuixE1R/EEwDdwb7xzNhK/1s4J4XAoeZYrb6/cB+uImFiLvn3X0bLzhO4DlSgH7wAf72TkEv+kXWWVCzp+Xjs1ah0JlqqDmFMykafkIa7qRylWkva8Nk0ntiJzpyE19lAoM2BNXs0RbV7saTn47Ur0JoSaVVr8RW3sccjl4Lc3hbNkdIYOpVhKPa94AkQV4PqDOPEArLuuxp/aS3NH20mUNWEddFkrBdEE3Y51+4l+aq5WOdPoPGtdSTMkc1DvR/HGQ2/SwTc3S/YjqYwo6foGTQkkQ/+HavdDim8EEtiDgDObaWMmnYTB7f8c2AH2Qd0FgAp+lwavT2bSARBgS45g5QpF/RLALRDqTOQs/Qmit94goCzud/99QaX32jj2Qe7FuaJKaoe23SGK9BAa0DOw1Cc2jUZVAlolQY0SiPuQBMWTVqPQkCtVSCJEqFg3yausTAT/ZAUPCfrO0w0gkIgZelkGj7cjqBSYByRRcjtw7mvHF95I+7DA0v1oDKYSZtyIdVfdc2Bdkb9Dmhv5xBatpfQsl3WfIofeA+A6tejE7X2Xy9HkVS/Kps+lGotQW8r5rShkYLhkoRKo0cM+vG7mvE4atAYrbjqT+JzyWx+CoUy6lpBoaLmYO8X0rOBxKXTIRym4oHXEL3yQhQvXT3U4sa94xiWeeNoencD5lmjYhzFnbHkqgSWv31mPEaGkSMxT5mCFAqhstmoee45Uq++GkGpRGE20/TBB4SGTiJteiphpxOF0UjD66+TePHFaDIysC9fTv5IH9WlAUwJ8Z0CCUlDOfD1Pxgz89ZTv2H8h7315CFUeiNKnVH+r9XLW6SziEzDiF4JAZA1eEve6LjnxKCfoKuFkMdNOOBDqdVhzOy+GI9Co2Pwkh9S8mbXlfF6grcyWmtvx51/SMWaqESrV/Dmc834fRKTZhv49ePpbFnjZvNKN79+Ip3UDBVP/q4BtVrg2jsTyRmm5bzFJjatcHPzL5MZNFiNzqDg/pu7NrcZ1YmY1SlYNKmEJVlhcAUaUSu0tPRiF/CPAzOoPNrGg5d2nRmfkKLhL6snsm+tnRfvlalBjCOyaPhoO2nfm079+7LvT1Aq8JY24C1vJPPGeXjLG9FmWKl762tSl00dcCEgBvzYD22j38k0p+GcFgIWTSpJ+my0ShO+kBu7r6JDGzgbMKfmEgp4kSSRkN9Dct4UvM56gv42zGl5NJftRa03E/S3EQ7JC6suIRWDbRBAx7VS6MxIxgYSglJJ2OPvEAAAxnHxCbtaVu0me8ZIbEtnoLKauu13zFT9GQsBeWACDW+8gSY9HSSJhjflgi/GMWMwjhmDe+9ebIsX49y4kaTLLkOXk4NCq6X5k09IXLqUvV+9gdGkID07PjW3vEMSTn2UIqaUaDvKP/13zLi0thRUOiNKvYmUyfMxZAw5469pUCUwxDyh49OVghp1HyLUUibNizkmhUPYi7ZR+9UnESXlFFQGE5aho0mZskD2D8SBPjUz7vH+Yvx0A/deU0lLJzv83q89PP1ARMt/5Od1zF5k4rzFJt541s57/+vggmUWNq1wM2qSHoNJwUN31pKZE/93LWuVTZRtQTsHm+VM3tZApH+BU2UvBwAuexCNVknuWHPHsaDDTeL80QSbI5QoUlhEbTOiy07CU9qAyqhF9J4906PabEWXmIa3qfc+qd7gnBQCSkHF2JTFpBkKYs7Ve4o50LiCsBTLvGlKGoy7OTqax5KahxgOxhyPh7ojGzucqkDHa09zVYcDunLvF9G+BmcDJ7e8HdV+oGBMyKDNeWbFX9r2n8AwOoe0Wy7CvbsYdUoCIYcbpcUY2/bASYJ1dpKWzcJf1r2fpaY8SOYQNdXlZzbZA3Vy/6LXi0KnI/nyywl7vagsFoINDYgeD1IoRNgj+07UqanocnNRmEwEGxq4cKmFgF9Co42/uDdW72PsrNvQG5MYO/vH1JX1MndDkvDbG2gXmdbhE6AfQsATcnKydQd6pVzoXkTEHey9KUZjja5Y5So7Qs36D7s054Q8buxF23Ac3smg+d8lcfT0LnoeWC0S4O/31/OLv6bjcoZ5/o+NuJzRAspoVnDXH1PRaBVUnogNhBicp2H0ZD2/e0bO7H7ozr7P+YESACCT8fm9YRJSIjtnx4ZDcZ/v6lc2gCThq2yWfXGnOJcaPt4xYONpR8jjwlnat7K6vcE5KQTOz7qFek8JK8r+HnNuVNICzs+6hXWV/4g5Z04agru5gqyRF1B1eA0Zw86j9vgmEtJihUmX6Pwjn3odxWXe3SI/gAJApdaTkTebkj3vRR33ldZx9PIHO967d0WYLFtW7qJlpcy90/zBJpo/iDZ/tazqggJDkmhZt4/k759PxZ3d0wW89lQ/bcqd7pFCr0eVlITU0NBlYp5rxw5UNhua9HSCjY3srm1jzFQDDXEcwgB15dupK++ZbfSbgD/swR/2oFZoyTKOJiwFaQv2ntUTwFV6hLJP/9XruSWJYarXvEvtxk8YdUdsZEna9AupH+AaydfckYi3TSTBpsSWrMTlDJM1VMMDz2ew8v1WSo8FyMhWU3I4sistPuTnhz/XMH2+kS/fdZI6SEXOsP6Vjh0ojD7Phs6oxFF3msCK9xt0OtYT6d6UL+8DYN81TxN0dO8LTF06iawbzmfP9yJRbJIokjLuPOp3renhG/QN56QQUCrUtPjjawMt/joGmeJzhButmRhtmR2mGpB3AirNwNflPNuwpsWW2DtbUOg02C6eSutXBwi7uo9eyh2m5cZfJFFREuBfj/a+wlFKigIaj+I6eYS0VCXutlYEAcR3nycxQSAhQcHBoiBGtUDC1rfwKMPw2ctoNALGQ2uoWilrl4eBw3u6jtYYNv4Kju9/n8TUQgrGX0Ft6RYqjg/sQ9MZk565ksZNJdStPkLAEf/eFVrPxxmoo9A6h92Nn/S6bzEUpGb9B2ekXHRV98CQkdOnfh74SwLf/4GRUYO7trf/9qZY88Svrou2h58eRhwMSFFtXn2ye+VCoVIwdHY6g6ekYM02obdqUKoUvHZNz0EkUy5KJiU7UhPBkqTm4lvjJ5emZOuY/h2ZNvrI1t7luZwNhFq9KI3R5kOFWoPKGJtD01+ck0LA6a/DrIlv17RoUnD645ssSnbIZpk2hzwpa4/3zNg549K/UHtiM4kZo9BozdSe/JrywytIzBjF0LHLaK45QOnBz6KuUSo1DMqfQ3LWWHTGZCQpTMme92mqjk9Zq1TpSM+dTnLWeAzmVIJ+N153I/a6wzRW7CEUlBc1S/JQMvPnYEwYhNYgJ5GlDZka1dfXH/2yx+/UWyj0WswzRmJdOBGFRkXTuz3nBtzy62Sef6iRm+6N//t0hSUX6cnJUVJZGaatTSIUlsjOVGF3iJSVhxBFyBuqoqw8xNgxai65WI/dIdLaKuLzS1RV9S7uW2dMAkkiK28Ou9c/zsgp159VIbDnnvewjc8m59pp2HdX0Ly9NCrBR6M0oFZoqXAfwKbtm02+ac+GbuP7z8T6qE+PzYK/+ccmPnnfQ1Pj2U9MOlPc+vlizOk9K3MGm5aLH56KvbSVdY/Jz+PUJclMXBiZrwkpGr57b/emPrcjyCfPRguuLCEPl+TEKJhplurIFgpQo6FSKsYqpFAnlZMl5FMm9T9ENNQaq1CcLcdw/NS2/zKO2jeQYSwk2zwWrVJ2VOpUZnIsE8kwFnLEvmFAP89oySAU9CIolGQNX0B6znSGTb6agL+VQflzSBo0Jqr92Ll3MnjkIjR6Ky57OZ7WeoZPvZb8Cd+D0xyRSpWOcfPuImf0EnQGG+6WKhAErKnDyB29FKFTXWKFQkkw0EZLYzEuezledyP15Tui/gYSCr2W9FsvBkGg8qE3CDb2rPn4PCLVZb1McBPgvBcuY9GH11PfEKa0NEwoCDarApVSoLI6RGmZ/DdksJLp0zSkpykpKFB1nCsuCTFqRO+LcEiShCkhE5/HQSjg6TGUtr+QQiL2XeWUvraNjEUjGffIZaScF6lrPDXlckpdshlOpeibucNxKPb3vuMu+XkwmgSe/kf32eZhf+yOSanVx9R5/tkvLdgSz8mlAIAFvxrfKwEA4HH4yZ2ZxsSr87Gcuub5O4/y/mNlHNkmBzSEAiJ1pd64fyf3u1jzWg1/uGw/TVXRfEI6jFiFJLToCeCjSirBQSMpQiatkp10YQhhuq4S2BeIgdh+FBottuGTGGifzjmzE1iUc7f8QpIQEREQGJW0gFFJC6LahUQ/+dbp7G34LE4vZwZr2nC+/uiXpA6eTMGkKxk6/jJO7v+YutKtzLrsMWzphTTXRKptGSzpNFXto3jPux2JSOPn30NazjTanLXUnowUEE8dPBG9KQVH3RGObH+1I6pDb0rBYEkn6I/YBlsaimlpkDn+B+Wfh8GSHuMTGEiE7K0cu+rhPl1TUxHkzj+kkjVUwy8fTeexX3XtSFabtCSNkZ19H6+IPFCn87cAvPm2B0mSNdtHHo32Dxw+Et/+b8lLovVEtBmhpbGYwknXcHjnqwgKJQrF2Z3i6QtHkDI7n5Dbz8EHPkNQKhj3yGU0bpLDkzfXRWoSt0e19BbxnMChEAweouTPj1t59u/d8yT57Q1xI5yUWj0hbyTKpZtE5P86plw/jInXRIRqW5MPd4OXtJHdC0BBIZB3fgZ73zmBJMGX/6pmxb+reW7PdBoqfN2GiHYFeYGXtfB0YTAadLThQkCgFTuZDKVEik10PRNoUixxj/udA1tkHs4hIbCyLLYwSmfccbuJdRt8HD0a4pknrQiClT/92UVdff/Tw0MBeevVULmbgknfJ+B1UlcaqSVstGR0vM4efgH15Tsp2fNuVB/71v2diRf8kqHjluFprcXZJNdR9bXJD7I5cQhJGaNoqpYnidfdiNc9cOGu02zL2O6IsGVOSLiQvc6+LTq9wcRZBrascfP7W2viZut2RtDl5+PZz8cc7y2nS3fn1GYteVeMZe8j66OOVxavo7I4UsVq/+bnTr90QOE6Xo8uzYJCo2ToTTM5+dIW9v0yksxjUFkpSJjB/uYvGWmbx77m3pMFdsarbyV2vL7uRgOlJ8L8+E4T27Z0bS4KuhxxI5xUJgshr5uRo9UYzfIOYPQ4DdbEyA5h59aITyEYlFi/M42nH3ORPkjJjbeaaGoM850FjYRCEoIAz/47kemztLzxShsnjod44JEEDuwJcNPVzR2/384jGbhcIju2BNi+xU/6ICVLL9N39HM6Zt42klk/lv1/j42PLuv6y33f6/Gejb8ij73vnOh4L0mw5ZNG8ieYu7mqa5RK0dXDFCgQEWlC9pe00ESwEw2MITeV1Esnx/ST/aMFcTV9AJVRh2lUFmpbbBSfGAwgBgc+/PycEQI9QRJBpRRQqUClEvjTn1v56R0m1qzzseEr+cbkT72SmmNfkZg1lqC3FU9rHUZrJm0t1biayrrsu8ORfIpfOxw6jVa2UxKR3pzSZdimx9WA3pyKwZLeIQQc9ceoK91Geu50hk+9DsPRNdSXbcfvHTin0zjLAiyqZCZZ5apIe1pWoFHoGZ9wIVqFAV/Yzf7WNWTrR5KhzQNBgSNQQ3HbToYaJ5KszgRBwBNupah1Q9x27bjnykqmzzdx+/0p6A0Cv/nhwMYs9xapU/tP9TEQGPazBVR9uJf0CwrjOoY9oYH5ne+8bSCdlPJ8PlwUEeJF+wMUH4u/MKnVAiuX+/joXfn7tblEfv1AAuMmqtm9I8CCxTrmXqDj7tvtrP5CfnbMFoH7/pDA3At0rFslHzMYBT54x8cjD0byTH76c3NHP6cjZ0aa/KKP1o+AJ4TGoMKcFlsedvk/KjHbzqzG7+kQO1GApAnZaNFFnVcnmUlZNC7mut5wBgH4a6MjyZRqrcwxNcCh6N8aIbBzd4Cf/8zMseIgHo/ENVcZ0GiikzzbWmrwOOtIzBxN/cltZAw7j5Dfg8mW3a0QkE5jIevOjqxQaRDD8W3i7ceVqmiv/ol9H9BUtZes4QvILryArOHzaajYRVnR8o5dSH9woHU9c5LS2d0SyfTVKUzsbPkcUQozzXYpJlUiGbp8djjkEotTrEtJUKeSqRvGfucaWkNNHYlV8do5g6fqrfolNn7pomiXlwu/G3/LumTFLahPI4GLtyOwFqYy91/f4/jrezj+6m6G3ziZvCvGEfIGsR+o5chLO3Aej2x/k8YPIv/KcSQUJGNIl7W5IZeM6PFzht8wmcz5eRgzE5DCIs7iJjb9tG81BrpCsMVD4+YSbBOyUepiF5eRtrkY1TbGJC7EHeo97fDpaG2V5+iw4SqWXqbniUdcfPf7Bj5495uhqH7vjYjZ8uB+WXhkZinZvQMWXazH65FYtzKiPG3ZJCtWU2dqO4TA6f20o72f02HNlrVhe3nf6MEDbUE0BhVqQ+zy5qgLxIZ+DgDqpVgOLeeuExy46R9k3zQP87jBqMy9q1ketLtxbC2m5vVoMsRwwItCrR1wrpZvjRDYtTvAbXc4CIUlJAk0agFRkgh1Ul7UOgt6c2pUiKhCpcXVXDZg4wgH/SiU8R18CpV8PBSMLVDhbDqJs+kkOaOXkJ4znbQhUzEnDmH/uicRxYFxJnVGa6gJUZJNZQHRi0pQY1AmMMUaqauqEtTsda4k1zAOvcJCqWc/jYHyuO3asfAyC/O/Y0YQYO0n8R/Oome+RpdiRJOgI3fZKBTqLnifT8E6PIVZT1+KdXgKzftrsAxNIn12DilTsvjq1g867P4KlYKA00fjrirMuYlozFqaD3SfWKRNNDDiR1MJuv3YD9Wj1CqxjUpnwq/nsvfRDf32sbXzy6tMWvSDYsP3ajzHaA004g7Zuwx7jgcpFH9O3PsbC16vLBDOn6/9xoRAdaforEBAvmntCXuDc1ToDQIHSgfFXJdgjXY4V8eJ8uoq8U+fID9Pnua+mUAUp6icw4H/fqEff62Dkoc/RKFRMfHDexGUCg7c+AJBZ/zfTQqGkELxbaNKnRFPw8CXL/3WCAGAYCe7YSAOAVTFQTmb1+uStdba45sQBEWMpt8feF31GMypcc8ZTKmn2nRNilVWtJzq4q8Yc96PMZjTSMocS2Plnn6OSkIpqE5LnY+9P76wm10tnyMhnaI0lql6D7ZuQK3Qcl7iVaxrejVuu3Ykpqp4/Df1NNd3LbjKl0dC5LIvHIamC56fdqROycbv8LLhlvdwHm9CpVcz7S8XkTI5i+HXT2LnA7Jvo3FXFY275NjyvO+PwzI0McYncDom3jePqjXF7H1kPWGfPGZ9qolFH16Ps6SZkx8c7Pb6nnD4kRUAHH96PSpTLC1Ei7+2T4t/O8JxFAmgQwB80/B5u5aWggLszSIP3R9LJ1JTHT1PuuvndPjdQfRWLWp99/PndOjahYfjv0/f0g4xEMJX2Yw+JwXRH0T09n03EvZ5sOSMxFM/sILg3I0LOxPE2SYNpAAAqDq+ntQhUxg+5VoUyoiGPH7+PejNqZQVfY6zKeKMSh08GUtSLp1DRwWFssOOFe6CZ8jtqCJp0Bi0emuPY5KQWNf0alTq/F7nKtKmL0aTkMQ+1xpMc+ZSZDqEoFKRfcFVmHMKsY6YjCiJJI+fg2X0FHYatzP4ouvZ5viooy8JMarfsVP16PSKjhT/gYAkSqy64vUO00/IG2TH/8hZrYPmdU+M1h2G3zCZtBlD2PXg6g4BAOBtcOMqczD2nvNIHh+rvfYGmkQjmkQjw382H9v4bJQGNZnfGdtxXncqtFkpqKP+NMrehTp2lex19x0tbP4qwMTJGu66vW/Zx90hJbVvC21n/Os5N4lJCgZlKVn1hTfq79CBM+fSKfqkHKDHSKDToVDKz9au14vjnk/P1XPH04X8+9isHv8ArvhRxCl/+U2JUf9v/lUKC5ZZuOzGnsfYtPoA0qmdo23anI7/ltETsU6eiaBSkfWDWxFUqo5jljGTUJlk06cYCtBctKVP96I3+FbtBM4VuBwVJGeNw5o2jLaWagSFCmPCIBor91BdEm3HS8kajzVtOKGgF7/HgSSJGBMGIQgKHPVHsdcejvsZrc1lqNR6JlzwC9wtVUiiiFprZN+6WCqNrqBQaRADfiRRRFAqCXlciKEgCAIKjY6wV7bPKjU6Ai47UjhE467uMzD7lCfQS/ia2gj7oheL9uiJ9ipVZwLT4K4FqLvCgTnHhjk3kaZ9feegD9jle6e26HHsk+3B+oyIOcgXlkMw25ku2xHuZ22DYcNVDMlV8v47ngHzCfh8Er95MIFXXnTj90skWBW8+UrvKc5Xf+ll1Rc6fnG/hWGFKnbvCDAkV8WCRTpuurqZ+tozM8sc/rKCKdcPAwGS8yw0nei6jng7pt04HIBAW4jDy2M1Zlu6ht++MxZjQvdLn98bpuyg/BvmFmrJG6kj4BfJG6Elf3TEAXzyVI3iw7t7rjlQ9+EO6j6UnR+O7Ruj/iMoQBKpeuNFAFqL9nQcO9v4PyFwBija+AIZebNJHTwRc2IOkhTi+K63aKzcy+lmmOqSjYRDfozWTPSmFCQxjMteQVPVXupKt8W0j0CirnQriekjsSTlIoaD+Nr65li0H95O+oyLEIMBnMXR2cyussNkzvseKAQcR3aSNm0Rfmcz3obui8T0JU+gt+ispQ8kVIauo0BC3lCPbXqDkCdA4b0L8VQ5YgTZ2cDZ8AncfZudu35p4f4/JiCKcKI42CchIElw7x0OrrkhwOVXGli8VE9FWZj1q304W858EWs42sLhLyoYuWQw174+n91vFHP4i0qaS6OFgVKjIGtCMpOvG8bQ2ekA7HjlGD5nrLKy6KZMjAkqwiGJf9x9DJc9yK9fH0PRZgerXqnh4luzKJhk4e83H6Z4t/w5j94bMec99kv5dUmRbK5b/1lrVI3i/7yYzHeWRBzA3722kTXruy5i34F4i/03IADg/4QAWz+5L+r9lo+jS8PFo2kQxRDVxRuoLt7QY/8tDcdpaTjeY7t4OLHvQ07wYc8Nu4DfXk/VuvcRBCHKLFa5+i0AKlZGEpkq17yNoFDGUBSfjuMHfdgbw5Qc8lMRhxHyXEKorevxtS/+IU//Fu6jj68mYfQg9BkJVLyzK+Z8nmUqCiFiail2bo1p0xecDZ/ApvV+Nq2PzllJu/FGgnX1/Pnvu3h+3xwS5tahUGtwrF7FoQPBGC4hUYTXX27j9Ze7Fh7x+Ie64yQCWP3nPSQNtZA2wsr0W0Yw/ZYRBH2ROXrrFxdhStGjVEcs26Wb69j276Nx+xsxQ94dvvWnk+xZLQccBAMibc4Qh79u4ciWFn7ybCE/e3Ekv1+6F3tNz36Fzo/MT+6183NgptoAACAASURBVNCjSpZerOf3vx54np+zgXPPJyBA1uJCZj73XRZ/eSsXrb6d/Osmo9RGy6sLPriRSzb+lITC+E7aod8fzyUbfxq3/859n//K1eRfF5vQAaDQKJn0x8UAJAxLYcpflnDhZ7cw763rGH5LhKpXUAhcsvGn2EaldzuWyX+6qDd3YIAh9dov0pMAANAbFZy3yMTEWQYuuiJ+iOi5gtbSrndO7aYiV1n/7erOohrqVsfni3EHmzGpE/GH21ArdHHb9AWV5WFyh6r4yxMJFB8/OzsogPqXX8b+pZzY5jlUhHPDBsTgwAh9TU4WxpmTUKUlY54/A21+DoZp4zGdPw1tfg5JN12BOlN+lgJtId67PdrEqtZFhGrCIGOUAAD4+N6tXTJ6pmTJzvstn0SEXiggotXLfUgSvPdYOXqTkqV39D0XpdUlcrwkSMmJs/fbDDTOuZ3AJV/9lMadFez67XICTnkbNeOpyyj80XQqPj3EgcflaJAdv/qUOS9fzZSHl7D2ileifnRDZgIjfzqboCtaiuf/YBKFt81g1dJ/dfStseiY9NBFGNLMHX13RuK4TC744Iccf3UnO3+7HCTQJOhQ6SNhopIoIYkS0574DquXvRRl3jBmWeWxuP3s+cOZZ/Amzl9E0oJF1L33BkqjiUBDPZ7iaG3HNmc+rXt3dknLPBD43s026iqDfPWFi0O7e7HNPUtoOdpA4U2TOfrSTrwN7rhtit/YS0JBMlP+cCF7/rIuKjrIPMRG0XNbaNp7dpPd6r0nSDPko1HosahT+t1fZWWYSxcPHHWAcfRo2oqKUCUmknzpMupefmnA+u4SggCiiGZIJpIkIYVDKC0mXKs3Y144m3CrO0q99joDHRnD5jQ9mROSsWaZ0Ceo8btDtNZ6qNzViLOmZxNW0C+i0SujcoHqTnrJmxBRaOrLvNSe9DLz0hRe/R+Z/kOlgmuuMPK9ZQYKh6kJhWD5Si8P/qWFtra+xxk//rCNRQt0pKUpaW0VKTkZYvFl0VGFiTYFW9amk5SooLIqzGtvunnmny7CAxz5ek4JAaVWhRgIs+9PqzsWaYCiJzdy/qtXk3VRIYee3UzYF6T1RDOuk82YhyaROHYQzfsiD3PmApmGuXZ9SVTfeVdPQAyEo/oOtPooenIj5/3r+x19d4bWpqdi+WEqPo0Ucwg4fVF9ADRsKydtZg4Zc/OpWhFZnDMXRsbSHlN+JjDkFRBobMC1L35NAIVWR9LCi2k7duSsCoFbLy7HaFYw52Izdz+cym9uiF1EC34wAZVBg9qk6TC7jPrxDIJtAUJtAco+PdyvewHQfLAWtUnLgjeupuVoA1JYQpOgY/2N0XQe+x//iiUrbiF1WjYtx5pQaBTYCtOoXHWcE+/EZ30daBx2bCBVl8t+e9dlO3uLyVM1vPvmwOUGqFNkwRSy21ElJvbQemAQKK0kUF4t25BOEUkFSuXQX9fqzd1mxLrqvRxd0b3fqjvUlHgZNkVNzmgTx3fKNv+qYg9Dx5vJHWui9IAbjU5BYoYGrzsyR0MhuPFaExVVIZ583sWoEWpuvdGEQgH3/rbvu8lll+h59p8uqmvDpKcqOW9WdHix0Siw4qNU/vNWG+UVIaZM1PDgb62MLNRw610DWyf6nBICttHptBxrwO+I9rS7ypoRA2EUGiUJBcnYD8rOmarVxxhx20wGXVAQJQQGXSAXkaladSyqb7VF13Ht6f0r1NF9d0bFZz1X86n47BBpM3MYvGRklBAYtCB2LGcCpclM2NV1dIQhf1gUI+nZwh9fHEQ4JFFVGuSLt+OPZ9SPZ8QcK/jBhI7XVWuKCTj7qc5IUPpREemzckgam0HYH8ZTGzueoDvAoRe2kn3hMBLHpCMFwzgO17P7oTUDTcYYF5OSv9PxOsMwjN1Nn/arv8rygTUzBOpl7VOVmEjI3vvAg9FPX0/Dl/tp3nCE8BnEvHcQCsUjhjqLzK+Ht7QwbIqFiQuTOoRA0SYHc65I46a/FPDC3ce46OZMtHolFYejdxbzltRHvR+cpWTJYn2fhYBOK/DKG208+XxEWXvmn9GK2123WxheoObhx+TAi9ffaaOsMsyD9yX8vy0ETDmJJI7JiG/LPwW1JWJXrV51nMIfzSBjbj5FT25EColY8pIw5yTirXNhPxhxOplyZC2nu/47990Znqqea+o2bC3D19RG4thBGDIT8FQ7SRieimmwTR7LgWgHmKBQYJ44BfPYiehzhhJ2u3AfKaJ55fKOGPHEeRdimTQVldmCoFJBcgoFD8uVhsqffoxAvSywhtxzH5okuRzhkLsijuyS3/0CqdNDlrRgEebxk1ElWAm7XbiK9tP0RXSRk4xrfkj9+2+SvPg7mEaPRaHVEWxupOaNVwg2N/LPPzdx+/3JTJ9vJGeYho1fxu462qkbJl5gY88aB5MW2rCmaCg/3IZKo2D6QjM1J1QMGSnw8eznyR9vYu4VqZQfaaO0qI0J8220NARoevxdSvbFN/UA7H9iI/uf2Bj3nDY5DYXOgK+uihPvHuLE+0dAFFFotIgBPwqVBlPBSDwVJxCUKoLOgYu574wjLV8RFAfObDZmnIaPvkjukF+XX9w/05DnyGHSrrsOQaWm+fP4zLyGUaNRJSejUEdMoKbhGZiGZ5Bz+wKO/OYdXEf+OxxSfcW2zxr5zk+zMXXiD9q7xk59mZdB+QYe+jyirKx5tXunddHhIHNm6VAq6ZOJxueXuO5qIwcOBVi+whv32qUX6TlWHG2V+Perbh687//xojJqowZfo5vWkq4ndqAlskvwNbqx768haUImKZOzadhWzqALZPNL9epjUZqe2qjpuKar/jv33RnBbqJM2iGJEpVfHKHg+skMvngER/93G5ntY1lzPEbrlESRhCkzCLU4aPjoHfS5+Vinz0YQBBo+lVko3UX78JbJRHTpV1xD2OOhcbnMeRNyRLSBho/fwzR6LNbps6n/8G2CpzS6KA4kQcB23jxatm4m0FCHJjUd68w5NH35aYzmlXHtTYheL82rvwCFEkP+MEKnFsnbfpvMc39spK4ySHp29+GVao2C/PEmVGoFjoYAwyabaWkMcmyni/pyH3nj5ISq/AlmVrxcy5IfZVBa1EbaEC2O+gDGBBV+T7SmmJk0gVaPLPysxiz0GhuhsA+9xsqxmlWEwrIAVZkTQJKwjp+GoFQihcMEmuoxF47F31CLJIko1BoMg/ORwqGzJgQKrXOi6mHvb+6fSejWH545/1BnGEeMou3IIYyFI/EeKyFQX4dCoyX1iqtp2bgB/dChOLd+TbChgWBtPc6NG6Kur35rKykLR6NJNjPqyWvxVjTR8OUBGtcWEXL2HDP/30JjpY9fL9iNvTbiLxTDEs/ccYQ7nx9BWo4eMSyx8uUadq2M1rgnjNNw8/UmJo3XkJujQneK7kI4g1SWmpow/3kxmbqGMG++08Y/X3JT1xCRBjmDVWzeFq08tLpEHP0Iue0K55QQCHmDOA7Vsfv3K3p9TfWqYyRNyCRz4TBZCHRhfgl5Zana1/77gsrlhym4bjJZi0dw7N/bGTS/oGOMcdu/EKHPbt27C5XNhnHEGDglBAKNDdAob9fFYADR58VbWhLTj7e0BG2GnPnqq6rs2CF0hmnkGOreexP3oQjfeajVibFwFG1HiqLa+qsqaVq1vOO9c3ukPkLQL1FXKd/L9v9dYc9aB3c/P4wn7zjO9CVJHb4+n0d+MWSEkZxRRpyNAWYtS8ZRH2T2ZcnoTSoUSgGXI8TwKWa2LY88jJIURq+xotNY8AVaAYmwGMLtayDcidgv4GjCmDMMxDBKg4mwtw1tSrp8HwN+BKUShVZPoPwEpmGjcB3rH31EVyh2bh3QncDDjyXwxCMu7M0i9/zKzLTpGl763zZWfdm3z1AlyZW21EnJtGz+ioTZc2jdshl/bTWB+lr0Bd3X5a58ZSOVr27COjmXYQ9cjn5wMkNum8/gm8/HvqWY4j9/MqDmNoVSIGmoBUOiFrVe1euFt3h9rDbfWQC0o/aEl/sv2sOwyQnUlHhw2aPn9sL5Ot5+OYUDRQGefL6V7bsC/PynFm64JpbyuTeYt6Se82Zq+eEPTPz0djO332wmoyC6JKcQ50ueicDpCeeUEKj47BCj7jwP2+gMHEW941upWH6YlGmDyVw4HE9tK4Z0C4ef3Yy7PFqzq/jsEMN+OJWMufld9NR/eGpb2f3gCib9YTFj7p2LLsXI4ec24yqLr73pMrNJmDYT44jRKNQa2eQjCAgKRZQZZyBgmzMfXVZsaUHX3l0xQqCzADgdf7qrllkXmsjK1VBR4mfr2q4jMoJ+kcdulv0jmz6MrZ3w4q9leo2yQ/H7OHkg1hRUY+9d0Y5gi52Wfdt61dZXf/ZMGa7gwBYB0WgE7v2NmYd+18qQHCVXXd7MI3+z9lkIODdvBEGgZfNXkfeA8+tNUe8BWjZ2wc8kSbTsPMmOSx7vOGTMSyV5wWimr5DzbSRRwrnrJA1f7se+JZbGIWnSHJp3xzfpAWRPTuHyp2aiMZ5ZUt/pdQi6gyTCsR3xTb9332Gh2R7u8Ask2hQsWdQ7VtDT0e733rTFz6YtfvgJvPBktFP+8WdaeeA30aafn99pwZow8H6/c0oItIfwTfjdQnb9dnmkapQAiWMHoUs0ULM+VhOuXnWMjLn5pM3MRRIl2fwSp+/i13Yx8iezYitSCTBobn7cvvuK+s2lBFq8JE/MOjWW+PwlxmEjyLjuZvw1VVS/8k9Erxfb+QtImDw9bvv+QhAU1L71aszxUEvfzCDjZxiYv9SMzqBg7FR9t0Lg/zDwEMNgtSp49kUbkgTTZ2qw2c5wYYjngO2nU7btRANtJ9ahSTKRdP4IBIWAdWoe1ql5lDz6OU1ro4MsuhMAOouGSx+fHiMAwkHxG3Hqd8bar3zMnpHAow/ZWLXOy1//aKO+MUxyUvS9H5ytwmwSKMiTl9bCAjXHS0I0NITx+eVBTxqvYckiPaXlIQJBGD9GzZWXG/nx3RFl8YX/dXHZJXru/2UCZeUhpkzS8MMfmPj484FnjT2nhABA+SdFDLl0NHNeuprWE034HR6sI9JQm7RUrz4Wd6Gu31ZOoNWHJT+Zxp0V+O3xb9TJd/dizEqI6ltrM6BPN9OwtWxAhIAYDFO54ih5V02gcVcl/ub4i6R11vkQDlP90guIfnl7qtD0rQZtXxC0N9F29FCXFMW9xQ/vSeLJ+xtwt/73aXoHCoJKhVKjR222odTqUGp0qM3xCcHMOYWoTQkE3S2Ifh/hgA8x4BvwnVtXuO8XLR1lOFNSFVx1rZEnHz97IcF9gdKgJWXhaFIvHochJwUpFKb5q6OIoTBJcwrJ/9Ul2KblUfLXz5HC8v3qbicw7ru56K1y6OThLyrY+3YJDcecGMbmorIYsK89QPoPzse+9gDBRidZP7kYKSziK2tAk2Yl0NRK8iWT8dc6cO0+EdW3UiXw46eGMyjfgMGiwtMa4reLZDbftBw9CgXUlXk7mBueecGFNUHBFZcZuPE6I7/6nxaOHg+y4qPoZNWD26KJFR9+wMrDD1i54x47b7wrrwWV1WGuusJIarKSQECivDLEQ49G70C8Pokl32tk58ZInsBDjzp56vme+ZP6inNOCBx8YgN1m0+Ss2wM1pHpmHMSaT3RROOuSqpXxretSyGR2nUlDFk2ukv7u9xQ7l+XbOzoO+Dy4al2UvKf+PH3Z4LKzw+Td9WEbsciKBWIPl+HAFAajBjyhp3xZ4bb5AmmMpvj+gRcRfuxTp+NY/OG0wbStypF9VVBSo/3n6LXWpAMCpjx8CKUGiU7H1qHUq9m7E+ms/3BtTiOyL4QQakg56JhjLp1KpoEHT67h5pNZRS9sL3DzzPxl3OwFiSx8+H1LHjpe4T9IexF9ex/ZgvuysjDZRs1FcvQUfKCb7Gh0OhQanUxhde7Q/qsJXGPi6EAQVcLYsBH2C8LhuYDW3BXnBllSFfoLGsaG0Se+dt/XwAYclJI+84EkuePQnkqibLqP5upX76PoEOel2XPrWHye3eSdP4IPKWNVL91ij6jGyN37uxIBv7y30aqzigMWkKtsqKn0KkRvX6ksIigUiL6Aoj+IAiyUAo0OJFOK+WYkq3jp8+PIGtYhNG1M1HhzY8UkDfBzOM3FHUUpw+GJH7/pxZ+/6foCm8JmZXdvo+H+oYwIyb1TFrY6hIZPqHv5IZ9xTknBAAat1fQuL1vnNkH/7aBg3/bEPdc0oRMmjtlhu68r2ubd2eIgTCfz3m2T+Novw6g7qsTXbbxFB9Dn5tPyiWXEaivwzp7LiG3C6XR1OfPA/CWn0QKBklZchmOzRtQqNW0bNvccd596AAFDz2OJi0Db/lJBEFAnZhMy7bNhJy9K114w91J2FJUPPjCIMqK/UgivPrkmccsj//ZLI69vpeCK8cy4RfnyVFYgsC4u2ay4cdyFJQUFhm6bCTH3thHoNVHyoRB5H93NIIgsPeJTR19WYYmMueppez722YMqUaGXTOe2Y9dzKpr30E8VaTDkD4ES96YMx5vd1CoNGht0Vqhu7JkwIXAuQRBpSBx5jAK7r+045j7WC11H++iaV00O67oD3L8oY8p/NMVpCwc0yEEwj5Pl4pI0lA5izcciN5luXaVkPnjizAMz8S+ah/p181F9AVp2XwY8/jcjnaOdQdIu2YOgToH7oMyLbXOqOTnL40idbCO4t2tNJT7mHV59O+2e3UzeRPMTFqU1CEEXng0lf/9j5Npk3TkDlaTkabiup/0nzzxXMA5KQROx5ifz8U2Op26TSfJmJvHoac2MeSyMez+nRxuN+mhizj59l6SJmaRMjlLrpdb7WT/X9cx4fcXkn7eUJr3yJ73nfct75JXZCAgKASm/V1+KNo11Xiwf7UW+1cR2mbnzu6Jxcr//kjH66HGSWQZRrDL/hmesDxJQy0OKv/4B0YnzKPcsT22A0mi+H/u7XH8tW++0uW5/iz48XD0tT3UbavE1+xh5iOLWXXtu6RMyGDCvechKISO32ntLRESvfIvjxN0Byi4cmyUEFDp1ay75UNaT3EB1e+uZt4Ly8i+IJ/yFd/+hVhXkIkmIwlEEUGjQmnSo9BraTtwEuPYoTS9s6Ff/WdPWUprTTFiOIgpbSi1+1d32376StnxG3S0sfuqZzs0/u7QsvMk/nonKkvEoepvqu9yJ9q+Sagtig6sCLf5qXg8Uh606tkvOl637oj2wVU+GZ37cN9bY0gdrOMvVx2gZK+8izpdCOz8sonv/yqHSRcm8/of5BBtn08iEJTweCUEAapqoncX373ExKSxOn7754ELBLjs3cv46PsfDVh/XeFbIQQad1XirnSgNmk59MxmUqbERrkAZC0azt4/rMJZ3Nixvdv38Brmv3UdO379+Tcy1oIbpmDMTOh1dNOZ4GTbbszqpLPW/zeFdjrn9sU+7AtGBLQg0O79sxWmMOX+eWiTDKh0KpSa+NO2rS5iGmnfjfVU2vLbAl9xNf6TtbIt/TTN2Xuk/5WmxHAYrTmJcNCP1tQzfYT7WC11n+ym+aujSKHe+4d8NY6oPAJ9eha++qq4JIeuei96qxZjSv+J99qRMlhH0C9yYl/XZjT3qfBQozUyz+75vRzdVnQ0fs7Qh8vdfLZy4IIkDCkGEnK+GRbSb4UQCLR40Vi0iIEwYiCEQhv9YLcv+Lvu/4K8qydiyLBw4u29NGwt61X/ubaplDoiNke1UodBbcPpqyXdXEi961hUda14mPa3SzGkmzFmWQn7ghx4bEOvv98k2xJEKUyjv4Iq72FGWuagVugodm3HqLKRoE6hxL0TndLUUaykM0YnzEMlqAkMYDx6f5F/3WQGLxnJ9ns/oa26i4zrXvgi0qcPZtaji9n58AZcZQ4CLj+F108gd+mImLY91SWoXvse1Wvf6/EzU8fMIXPGMsrW/gfHib09tu8vip76Ra/atTtTe+vD8VWWkZQ1vlffo+7gOpILpqAx2ajZ3zPRYdFdr/VqDKfjyG/eiXof9vu6ZLk9ubmO1OFWbNlnZiLtCpLY/S3UmeT1xevqfRCFJMUveatQKbji8yvQmDTU7alj26PbcFW5uHLFlez42w5KV5V2tB18/mCqt1Zz8b8uxpors9zesO0GAF6b+dpZs2B8K4RAvHgwrU3eUgoqBZahslbsqWll/yNrUVt0zP3PNay+9CWQJBRaVZR5YbB1Aq3+BozqRAJh2cE0Ku1Cal1HafFWM8Q6mbaAHaevlhzbFAxqGw5vJS5/I0MTp1PrOoLLH834ZxuVjqAQaN5bxeEXtuAq7Z3pRKPQscfxRYeQSdPlEhT9HG7dyETbxVR64lceO/3+7GtZRaImk1zj+F597tlGyX92Ycnr/26l4KqxiCGRipURk45K179CMAA586+lbN3rPTf8/wFyZ1+FBCiUKiRJImPsBZRviRaWpvOnIKjVSD65Ul3Y6UKdmkSgvAal1YI6Kw1Vsg3HW58jeuMHDmRphlMViA6WEFRdL0EHPy5j8rUFqLQDt5trrPSTNcxA1jADVcfjRxHmT5R9EV2d7wsm3DaB1T9bjc/uY/S1o1n41EI+vurjLtuHA2E+u/4zUkansOSlJbw6PTase6DxLRECsfA2uJn53HfxN7d1JGPNeGqZzE4pCJR9KGeASqJE7fpiZv/zCjx1Lnb/7kt0KgtKQY1CUGHQWAmF/RxtWMfItAuxeyqodR0hzSRnTLr9TZQ6tiNJIkNsk/GFXOQlzmBfbTTnzopF/zyj76FXWgiIEYFiUFpxh+ynzpl71UdbSNa02/0D/cXUv15Cy9EGDIMSsB+ooeLzQ4y5Zy7aZCNHnv+atJk5+Fu8VK86xqznv8vXP/mA8b9diEKjRGvVs/VnA2fHVKgUBN2RLbgmQUfqlMx+96s2fjsKfnwTKN38NhljF9Bw9GvEYID0sQti2kjBMIJCgcJkQHR70A0fSrCuEf/JShIuXUC4uYVgVR2iL/JbCUqFHAV3KjrHpkqPEQJyw/iO4ZZKN+sf38/C+yey+MHJrHtsP4G2/hUB2rfWTtYwA1fel8sTN8YSQ2p0io46ArtX9c8HplArGHnVSHY/J0ce7np6F7kX5pK7MLeHK79ZfCuEgFmYTNPm3aQOnY7KVU3ZaydIz59Njb0chVKDJImoQtmUPFFDU/kebING4m2tJ3fi5ZTu+ZCiJ6PjkF3+RnQqM21BOyaNTLwm87sIGNQ2shLGYtYk4zI24vTVMTx5LnXuYzS4j5OfNJuq1oGjGHAGG5hku4SwFKQ5UEVp215GWuaQpstlX8tKvGEXgw2jGWddiC/cRmnbPvJMk0hQp1JgnkqTvxKTysZ464V4wq5Ys5VCgXXhfKwLL0BQd/9zS+Ew5b/5HdokI8dfjpjH8q6ZiP1ADdVrjjPn5avZeONbjPv1fBq3l7Pr/i9RGTQIAgTsnn7VBI6HTXd/zqjbpnL5hltpq3NR/PZ+tt63krkvLOtzX8kjZ5I0bCq6xAwUKjUTbv1b1Pm9L/486r0kiYz8/m/QmBMJelpxVR+nZsdyQr6I7Tdl1GyyZl3OgVfuJ3fhDRhSBiMIAr6WBsrXv4mvJcI8acufRMqoWeiTBuFpqqJh/3qc5ZGFqCszlC1vAjkLrqN668c0HGyvSSuQXDid5BEz0SYko1BHUxF3/i6SJJI6Zg7JI2YiKFVxv0fjsW0kF0xFodLiKIvNym7bsqfL++r8JH5d6pw7LiDtkglsW/RXANSCltnm7xImTPvu/nC4qkvbzEV/nExSroVAW5Axy3IYsyynyzF0hdMzhj96spx9a5v52YsjOwrJA5isqo73zsYAv7tkLzXF/dsJmNJNKDvtYsSwiLPMiS2v56L03yS+FULA527CnDwUMRRAEkNojYk4ag6h0hhQ6vQEfS5UGgMeZw0avQW9JQ2VxogYCmBKHIzbHu04q3XFN7EcrJNDR481RqfJKwQlohQ+1eaLmOsANHolAe+ZJVDtdkQ7rQ+3buz2/JHWTRwhEhlT7Y1fSg8g5ZrvY5oSv3La6fCVnEQKBGIeSne5A9vINAwZFrx1crJK5RdHyJiXT/nHRWQuHE5btZPjL+9gyLLRcfvWCQZCBAlLYQQEfCUeBEHOtqz9upz3Z/0DgJMfH6a+TtExBPPimRz7tJiDz0VTQLS3B9jz2Eb2PBZ9zxxHG6PaAPhaGmg6ug1BoSB1zPnU7++CDuEUUsfOpa2hHMfJ/ZgyhpJUOB2dLZ3jnzwd0zZhyCjEoJ/Gok2o9CYs2YUE2iKht5nTlpI6bh7+lgaaj27Hkl3I0EU3U73tUxoObOh2HPGQOW0pqWPn4ijZTd2+NWROW4rGnEj1tk9prYyucpY6di76xAxaTu5HY06M+z3UBgsKlRZBUGDLGdtjdFBvoDRGC6Y9bbG+BqswucudwOjv5PR7DPFQetDNA0v38fDKiehN0aamr96u45NnKnE2BdBqBMKihMWswO7oezKgu8ZNsFP5UoVSQUJOAsWfFRNsC6LWR8yapkHRfg8p/M2lRH8rhED9ia1AJFpEEBSyxitJkQnUaSJVFq3oaK8zJff789sFQFdQqhXkz0zm8Nr6btt90zBOHB8jAKRwmGBdPWGXG0QRVXISquQkBIUC7+H4JRLrt5SSMnUwo+46j8PPy2Ry9oO1DL1yPOUfF2E/WEPOZaPRp5oIB8JobQYKrp+MtTCN4bdMp3FHBZYNiThC9YSkAGalDZ3CRGOwEq8Y7ejWDh2E9ZLZqNOT8B0tA8B8/gQ8e4/jL68l4cLpKAxafMWVaHMHIaiUuDbtI9TgwHrpHNxbDzJ3RAsqFaxZ5ScQiDxM7poS3DUlKJQqbHkTaD7aPbeQISmT4x8/1fE+76JbsWQXYkzLoa2+LKpt9nlXsP+lzvWpI/PVmJZD6rh5uGtPcOLLFxFDQRQqDfkX38agaZfgqjqG19779B3OUQAAIABJREFUaDKFUkXyqNl4mqooW/cGACFPKwXfuRO1IQGfI3oeGpIyOfbRk3jtNV1+j9QRs3HXnSAU9GFMyur1WLqD6jQhYFLaKNBNoi3cwnHfLjI1w3CLPXhpzxKcTQHumrqdQfkGElLUCIKAyx6k/FBkPmZnKVl8gR5/QOJ/X+ma0rwriGGRov8UkTg8EW+Tl9HXjSYcCFO2pozMGZkUXFpAzQ75N5n282kUfxYJb3VVuxBDImqDGo1JQ1vD2aNn+VYIARmRiRIVTdA+gWImkvze5x5YAq94GDLh3NretcO6YF7U+5bV63CuXY/ojab6FdQqNBkZhOxyjP2mH0VX50KCor9/FX2NUoHKIGeHeutcfH3HB1Hni57aCE9FtPNU1WA8YivJqiy8YhuusAOzMpGGUPQuzX+yhkBlPc7PNiGFRbT52Xj2F2M6bzyB6gbUg5JpeFZ2WioTTITq7diWnY/veAUheyu2Zeez6ql3mDpNw3P/tPLVej+vv3Zm23rHiX1R753lh7BkF6JNSIkRAi2lp5tQIvMxafg0AGp3r0QMyZqhGApQt2c1eRffSlLhdKq29N6PojYmoFCq8DZFEiA9zfJiorXEOuMdJ/Z1CICuvkfY78FVX0pi7jjU+uja0SMeuarXY+sMY0Fa1Pthuskc9W6nQD8JgBR1FtVH1nV5/T8W9S6p80whhiWqjrVR1UVif0VlGEeL2C8ZdeDlA1z55ZWojWrq99Wz+q7VhANhdj29i1m/m8Wlb11KyBPiwCvR88ff6mfrI1u5csWVuKpcfHLNJ118Qv/xLRIC5y4KZidTub93WbffFJRmE5qsaAeq4/P4piwpGMJf0fuSfZkLh5N9USFlHxf13PgUGkOVJKoyaA5V4xIdCAg0hrr4zNOeunCLuyNzKGSPOL8lXwApGMLxyUaMEwsJNbXg+GQjF1yoBQluv8VBTu6ZT3FvczS1b9gvCxOVNpY90tvU9f3TJ2eeahPdn+fUNYbU+HkvXSHocSGJYbQJkV1u++ugJ5Zbpjffo+7QV4R8boJeV5QZCyBhwpA+ja8rhAnhEaPHpzKaCbXFj9l31f936xIkJSrQ6wT+9VrfdwHtkESJtxe9HXPc0+hh9V3dm9yKPy2m+NP4BJQDiXNOCCz4SQEL7pDpnmuOtNJU2kbu1EQMCWr+MncdnhZZk8oeZ+XGf05BZ1ZRddBJc6WHMYvSEcMSb96zl6Mb5IibYbNT+OE/J1O0uo43746OlT7/lqEsumc4q585zvp/nIi0XVVH7pREJFGi5nArOZMS0RiUnNjezL9vkh2m+TOSyJshP3iF56eSPMRI9jhrVP8r/xZRMVJyjdzz+Ry+fq2MaVcNpnyPgzZ7gKQhBl65bRdtDjmqYuGdw5h3ex5rny9h7XPRE6BgVjKzb8jl5Vt39ngfDaNG9vqe9xXVq4/JRXv6AHWSCYerAaVFh8KtQmnSISgVBJpaYyKAG1/8WHZih0Wcn8vUF40vyDsN+5sRu7Jr495IwZiyiDkl9TwDb/7Hw+VX6Pn4gzNfSIKe3vPydHayDjROd/qKoQD7X/oNuQt/yIRbn0ASRVorj3L0/cejNP529OZ7JOVNRAqHEUMBBGUsK6n96+Mc/2Pfor6GP3g5thmRugT729ZjVaXRFKzGqkpjX9s6UmctouHrlX3qtz8YPMJI0C9Se7LneSEhVwE7VQb5rGH4jOs5tvXM8i4GAueeELgjH29rkNfv3EPpLjlUUlAIpOWbOgQAwDV/n4D2/2PvPcPkqK7t7191TtNhcp7RJGk0GiUkJAGSkAgiZ2FswNiAfe1rGxy4OF0HsI1tjHG2McEEYyNbgMmIJCEkoYhymJxzz3TOqd4PpemeVvcEBUD837v0zKPuqjqnqrqrzz5n77XXNij45zf2cPBNScPj/afN3PbomXzq/jn89vJNOAdPLHlq1oX5HF4/yJq79hIJxrAUafnac+dQuSiLkjlmuvc5aNk6QstWiUJmytNw8M2BKcUEpi/N4TeXvYe9N/1DuGNtF8u/UMGCa4pTjMC8K4rY9XxP2nbHQtAkDxwfh991LEyLqo6K5oUl0a9AGH/XMCFrelVEMTy1RB0xTW2+hiNh/uu/9YwMx8YpYSt+ONU5xoFvqAtddjG6nBLcvYnvVJcjURF9VmlFEAlKz4T8mJWGNjNZmRLAUFCJsbSWjneePiUJbSp9JiOtuxBj6T/3iPP4XWoRb3K+QJ6ynMFwBw6k30mOspSQ03bcIoaJa1YeN2X0yjtKmbsyk5f+1M2Lv58409rpjKHXySY0ABmYySQXtSB9Z/1iJ26OwysgCKh1k2dof5g47YwAwOsPNMQNAEhLqoGm5NnM6MA7agAAuvc52PxUOyu/VMWSG8tY9+CJFXePRUVe+PEhIkHp27f3+tm/rp8zV5dQXGc6KdfPC/ccHNcAADgHAjS+Z6V2RbKeiUonp+78PJ7/wdToqSnKmB+zEZAbNEQ9AeQGDbFgGLlBg7fxw1FIFGPSzM00TgEOMRZFY8pBkCsQo6e2cHs6DDdsJbt2CfnzL8Q72EksEkKmUJE/7wJAxNYorS6DTkmawFRWx/Dh9wFQGSxYquan9JlRVIMgyKQ2JziIjkXQPUxOzWJiRz+P7h2JhCZPQx/etqHxmo6LqCfZCOQqSxkMd8TfF6mq6BBdU7728iV5zLiwmOL52ZiK9MgUMmJREWefl949wzS900vre/0T1hoonyWxcBq2TZ5Tk5Eho6wkfaKaHDl1wpnkkuxyLRWqGaKXQ+KOo1TYZJhyKimpuwi1TvIayORKhrv3TXotHyZOKyOgUMsQYyL7X58aU6JxU2q1qsaNVlZ+qYqqJdnAiRmBviMuPCPJD7CzXxq4NRkn95G17Zy8Ruz2NV0pRqDugnyUGjmR0NTWpTLNqdNbORUYWLstlc31IWFmnZL2tggmk2zcpbxCm0H15V/B1d2AIMhQaA10b5pcUuJE4B/upW/naxSeeSkzrvkmrp4GjCW1qE059O9ah+9orMA72Il3qBNjSS3Vl3+FoHMYc8Vs/MO9GAqTK+KNNG4nu3Yx06+R8gHEaISQ28Zww1aG9r/H8VZdGTqyedx9B+/8+/Hd8FF4mvpx7JCUdHUyIyZ5DrXaJQDIBSUKQUVwZGrG5bPPnE9erTllu0wuYCkxYCkxMOuKcmztbh67enz30miB+b6Wqa1s2jrTTxKqhHpyKaKHVvrFLgL4EBAoF6ZTTCVBYTaNYuoKzWltxfnun+L06DjL8WPEaWUEDJlqPLYQId/U+PbOgVR3j3NAGqxN+Sc+CLqGUvuNjfJ2PwIvQvMWK7YeH8Y8Da6jLq15l6fPkpVptZjOXYrcZEJhMiE3S//L9LpjDpQx7XcPpO0DwP7aOhxvvD31ixQENBXlWC67FIXJiMygRxAEom437h278B08TKhnTNnGY1lc4zz4mVddjmnF8vj77h/9hIgjMWtTZGVhWDgfbXUV6vIyEARiPj8Rm41gdw/2l15l6/shDAaB0jLFuEv5wb3vYK6YS/6884mFQ2l96acSg3vfIeAYIm/2uWTNWBw3DI62sbNAkbZ1j1J45qVkFNWg1BkZ2P0mtubd1N98T/wotTGLaRfcQsTvYfjIVqKhAHKlGkNhFUWLr0SMxbAe3JR6ER8xht85FK8k5ou58MTs9IcloxATo3iiDsxVi8YVkBtFzflFaQ1AOmROy6D+6mkc+E972v1eZxhTtopwcGqTqbrp6Qs95VFCL200HDPQN4h7EASBfIppZHw33UT3+1HjtDICgozjmsCkHY+PY4YpU6Q/NvYRJmqkgyjCjn93s+DqYtY/1IIxV03lokx6D6UuYRWZFswXXfiRXp925gwyL78UVWGqr1qRlYXl4lVYLl6Fv6kZ2wsvE+o98QFWbjQScTgRVEoyr7gM49lLQJbs5pFnGJBnGFCXlaLMzsay6wnqZyvYtSO94iNA345X6duRnoI4dOA9hg68h25mcnDd3ronxf9uPbQZ66HELNp83nlknLmIgUceJjycoCfLMzLQnreIpsf+MOH9RgJeut77d8r2sRnAJcuuR6k1cmjNz4iFEytWQSZj1k0/xlwxB+vBTfH7OBbp7uOjQGtgL+7oMbLQEwjIARTPz+ay+xbF3/ftt9G7Zxhbp5ugJ4wmQ4WlzEDxvGwK6iXf+qofzMdj9dO+OVXvv3W3m/kXZlFYraNtAiVRAI8nxuP/8KT1tilQ4BTTr+qdoo0C4dQwqj4KnFZGwN7rJyNHzdzLC9n78uQDx8LrS2h+PzkP4MzrpWDb7helWWjAc1S3pDCV1le/KnUQOxGEA1EU6lNbAPq9x9q479DFtO0Y4ZJv1xINizx2WyorKOpyY39tXcp2zbRytLUzEhtEEfvr4y+TA83jF8AZRf5/3Y525oykbWIsdjT5zA2CDIUxA2W+xA/X1lRTdLc0eLXfOTWlzGOhKikm1D9A+a9+nrxDFIm63ch0uiQRspFnnyczTyQ3V05ZeYz9+6YeOMy++mpkegMylRL7O5IUQu5nbkRhsWB/Yx3+1layr74GmU6Hfd3rKHNzUReXYH/zDRQmExGnE8c776AqKIz3mXP99cjUaqLeZPdD4cwV9B3eQOHMFUfjEgL9je9RMH0p/Y2bpIRIMUbpnEvxOQdQqHUMNEqze405j1gkJBUcHgNz+WwUGgMBeyJulJcr5w8PWLj+sx9evoxMpUjLKBpF1C8Z4xnaxTT6d+CLOdHJTNRoF7LryOvjtqu7rIxLfroQgN8s+g+R4OQeAoVazje2X811fzyHdT/exYEXOpL2/+lrDSy5Iodv/30WdyzaQXACr4PPL7L/UPqJxHbxHeYJ5yAXFQzRS4gAIiKlVFMuzGCnOH7+Q/z+ln+Zxq1PMmPJLRzc+JcJj9XpctDrcrAOH6a0dCldXadupXdaGYFRXHp3LcPtXnoOJma+2dP0eIZDBNzSj3q4w0vd+fnMvrggHkMorjdx9s3lhANRtj0jVRIabHYTCcUonGmicnEWrdtGEARYfnsl+TVTE2ibDLYuH9OX5rD/tVNfQ2D+VcUU1ZnY/3p//N7HIup2p3XjmFaem2IEjsvdkwbHGoCo203Pz35JzJ/sPjOduwzzRRcg0yYMr2HhAjw7dx33ORUmI1nXXQ1ALBDAvXkrvoOHCHZ2SXV9BQFldhaammr0s2cRtg6jLlVy/8+Pv+yiprKK/of+QtQj8cJ1M2cy9M9/oMrPx3z+Bcg0GmI+H8PPP0f+52/FtX3ijGMARBj8+9/RVlVhWn5ufHM44CFn2gLkCjUBvxu1IROtMRedpQi9pQivvRetMRefow+5SovH2hFvO7R/I0WLL6fmqq9jb9tLNOjHXF5PRnE1Ya+Dgd0S//yJh7LicgeCAL++z0J+npwf/MTBT35g5jO3DrPlrXz+9LAbtzfG6qt0BINHM2WvntxXry3NpuRzS8k8e+KyqKPaQYGYB1dUMkau6DDB2MR++aoVCWM6FQNw7HGVywpSjMCspRYUKhmHNjv4zZaFdBz04LaFx3Ub/vUb6eOKtcJ8FCiZLsxlOsnKvTGiLBBWICMRVH5HTE6m1JuLCHptREK+o3pfAnV1n0IuU9DS8jqCIKe4eAkyuRKHvQ2na+p5PMeL084IbH6ynXNumcaX15xFzwEHth4/RTONZJfr+cO1W+hvkAbCf35jD7c+diY3PDCXcz43jZFOL/UXFSCK8O9v74szcILeCFuf7mTprdP4/MMLad9pw1yoxVKk5YPnezjjmpNPkd/9Ui/ffXcluZUGrO1elBo5mgxFPKfgRDHQ5GbeFYUIAux67sN7CKYCbU1yYDLU18/AHx9KMQAAznffw7t3PwV3fBlFlpTBmn39NQTbO5JcJFOBYdFCFGYz/qZmrE88Ha+lHIcoErYOE7YO494iVWerqlJgG4nh84pYrVP3vQ4/+yw5119P1Odn5MUEOybm9yNTq1Hm5BAalOiNisxjaH1C+plw2GpN+n8U1radIAjk15yDtT1hHFu3JRKL/K4h/K6h+KpgFEP7NxAJuMmuPYv8uechU6jwDfcwsPstrAc3EQl4WbxQzee+NMLSs9R87UsZXLpKi90R43d/cfOLe8yEw5ImTkdXhJm1Sja/H0QmCHzha8PMnDG5VLemOJNZv785XlN4KpAJCup1ywnEPGhlRtQyLVWa+bQE0ovTjcYBvMPHR/X2DPkx5GrJnZEaR/jGo8kuvulnTqwmO54R8OHGx4nXd65ZdBMNW59AkMmRyRTkZNdy6NAatBoL1dWXsf/A32lsSmQJ63Q5J3yuyXDaGYHX7m+gecswi24opXSOmcKZJobbPWx5qgNHX4JaOdDk5o/XbubcL1Yx49wcCmYYOfT2IBsfbaXvcDL3fN1vGnFZAyy4toTyMyx07Lbz/A8O4HeFT4kRcFuDNG60UlhnJH+6Eb8zlHINJ4Lt/+riyh/UYe/107b91JZ2PF6YV10Qfx0LBhl46NHUAXkMIg4HAw89StF37kKQyxFUKsyrzsf6j9TsyYmgMEs/5MG/PCLN/KeArs4o8+ZLg9MLz089WSzQ0c7A39oxnnUWxkWLCQ0l532EBofQlEm+3ojNhhgKIdNKBARlbg4Rhz2lT2WOlFCoyExTW0EUGemc3Defzmdua9qFrWn8lVVZqZxtO6G1XXKHVlUoaGgK09kVoaxEwRtv+7nqMi0vvOLjovOlFduRJmmC5XBO/jkXf+Ys5FoVYbuXpnv+E3f5TIT+UMLl6IxOPhnQZ0mfrbPv+BLxnP0+DLladJmp5JBtL6cyCk8Eh8UPTqr9njd+GX994N0/UVayFAB/wI5G89HK0Jx2RgCgecswzVsmf0hcQ0Fe+ukhXvrpxMeJMZEtT3Ww5amOlH3fq0v4JJs2W5Pej8XGR9vY+GhbynY1WqYJM3nyvyd2dVjbvXyv7nW0GPBzfGnou1/o+VhZZKriIjRVlfH3zrc3EHVOzrMOD1lxvbc5zvbRnzEP+6vriDiOL89CDIenbAAAtm+TBqSZdcdXfCb/ttuJBYPI1GpGXn4JZXay+KDvyGF006eTd/PNjLzyMhG7HdO5K8i98SaiTieh/n7M552PuqQEy0UX4W9sBJmcvJtvJmyzpeWqhgMnLkkwEbp7JLdIean0E29sjrBwvoqyUgWd3RH2Hghzy2f0fP07dpadLQ2Wx5MVa5wjSV00/eQF3Ed6JzlagjfmJE9ZjnyMm6Q5MP5gGouIoOa45cll8qPHp/nRPHLXaVhvWhTx+iT3m1ZjIRBInUx8mBDEj5mjCiAIwpQvIsdcg1FfRGvvxDLA9ZWrae15B19wcl4+QL2whBhRNOhoEHfjxcVcYSlhQjiw0iu2MUM4AyUqWsUD+PBQIcxEgx6tYOCD2AaqhHq0GJAjp0U8QIZgJo9SYkQZYQCXaGOWbAkucQQrfQyJE2f/3nfoYnY+281/fjR1jZ5RmFaeS+aVlyU2xGK0f+Pu4+4HoOBrX44bgVBPL72/+s1xtS/+wXdRZh+t/rb/IIOPPQGAQqMgckxJyGMpogADDz2K/0iqXPZ3HsjjF3clZuv3/LmAH/13Ii5TXaOguenDTwb7/yMW/PsOosEwe26eOKA5FnP0K9nnXU+tdglH/FuZpVvKQd/4Ac7Lfn4mtRdLxubYugAT4X/2XgfAoVc6ee1/J5dYORGcL1w34f4YMdaLz38o5x4LURRPmrR+Wq4ExmJu9afRqMw0dr2GVm0hEg1iNpSysPY2WnvXY3N1UFt2KQqFltbe9fgCqW6TquLz0aotyGUqWnrewuNPDXrFiHFI3IERC9OEWg6K29EKBvbGpJVBjlBEmBAN4gfMEc5hn7iZNvEwchTMFZZiIhs5Sg6IW9FhoFqYg0rQsCu2PqnQi00cpFEcv0DHp+6fA0BmsQ5Hn583fnNiCW+nEuqyhMDZidA9w339cSOgnpagzhWcWYSh2Ej/9h4crePPfoIdnSnbCsuUzJyr4c57JF+pVidDnyH55efNV7LgTBWxKP9nBD4keBr7MC+sQGnRE7ZPzV0zKsmuEFRUauahl03sj295tz9uBLRmNX5H+rKVYzHqQgJofHNqEisngh1iaiEdAYEyYToGjOwS352wfX7lWbiG2+OrFZ8rlc76UeHU8ho/BMTEGP6gA5O+GIM2D1GMEokGOdLxMkU5C8i1TCcc8XOgdS01JatS2psNJSjkKg60rqWpex1Vxaml8wACSEwFHx40gl46N4kBREcGXiQXiFbQpbTXCxmYhWzqhSVUCvV4ceMRnZMWqD8W2eV6Zp6Xh6VYy19v3pakl3SyqP7MPIovqMZQamba1bPIrMtDk60ne34RpppsKq6ZRVZ9Mm1WptEgKBNulbBtaiursUjiyxsMcZ6/MkNF/7YetFmpn+coxHA4RfoaoK8zTHtTiLdecPPWC26ef9LBd2+TDNRoxrDDETs2peD/cIrQt3Y7IFD2xZVTbnPAJ8mRH/FvxRdzsd/37oTHN77Vw0i7FFu76emVVJ1bOK5rSCYXqDm/iJuelq6nb/+IJCFxDOasyCSnZOqJpHKFgEKZek4X9pQ/Jzb2i1vx4aFamD1hv5b8WspmXUJZ/aWU1V865ev5MHDarwR8gRE8/iEyjdOQy6TByOMfIhINoJCp0Gmy8QSkYI9WlcoG0GtyMBvKqK9cDYDXnz4wpEN/9H8DflGa2Ywdvn24MCLNZv1iKrXNK7pxY+ewmFh+LpStTEl+k0/ykf/p+vfjrwtX34IuGkFpymT43XX42lsovO5mBIUC65svk3Ph5fSu+RvaskpU5kyc+yZe+oa9IRRaJUq9isCwl6w5hRTnGdj/m03UfXkJrrYRzDNyGDmQ+PHIdMkDdCxw/KJ8scCYGZwgINfpiHo8ONsdONrsONrGXwWkYx+N4qk/2Gg9kjo7nErG8DlX3g/Alpe+M26y0jlX3s9w7z4adv0jaXvtolsIeIZpP/Qqaq2ZoqrlZObNQKHU4nH2Mti1E2vP3rR9jsJgLia/fBGmrApUWhMhvxOHtZm+ti34Pemf0RkLbiS7aA6bX7wblcZIUeVSLHm1qHVmQgEXTmsLvS3v4fd++DU0XPu7af31q1R+61LcB3vwdViJ+oJpkz19HdL9ZCoKKVFPR470Oy5QVqatNjYKMSay7ke7+NQjyzEX67n6t2fhswXp2z+CvctzNFlMiaUsg8LZmWjNkmii3xnitR+kj9Hd8VAtb/ytl3//smPSe7zki8Vc9uVi5AqB7a8M88x9bfjdk1NVrWI/VUL6CnujOLLlsUn7+ahw2hsBt7cPl68Pi6GURCJv4knz+q2YDBLDxx9KDTh6A1bcvn4Otb+Qsm8sVGioExahRpPWXWMV+8gU8qkXltAspgo+ORkmizxmC2cBMEw/vWI784SlRIhgZ4gesRUNWmYLZ9FHB8PiJK4VQaD/+X+gzi0ga9kFyNQa+p59CqU5k9yLrkaMRpCpNWiLSpEbJs95EGPS55Y5u4CwO4gYi9H+n4OUrKrB2TyMMkON7WDyslSmSqYATlXdM6lNKJk5ItOoiXo8ZM3Iwlhqon1dy0QXPe6uWFTkZw8X0tkS4uH7h7l4tZHX17poa5Wu8XgSxY4X2oxcjJnlzFz8eRTKRD6EOacac041WQX1NH7wT8RY6qBRUX8FhRVnMzbnXWvIQWvIIb98MZ1H1tHT/O64586wlFC3+DYUqoSB1uqz0eqzyS05g8M7nsQxlBwAVeVbCA2kN7a5q8/BcsFc2n/0T0L9iZWewmKg+GuX0XFvKqNrzsO3oSmygADT7pg4Y300T6BKM5/D/i1ExMmZRKPo22/jpbu3cc3vpPq/ukw1VecWTtjm2f/ehL1zfPpmbpmWgkot599ciM8VYc87Ntr2JR9/5qXZXPuthOvy7GtyseSp+PWtqcXpj4Xs6L+pQpuRg999alhLJ4LTzggUTFuCx9GL295FUdVyels2kl++mH5vA0G/E3NOFUOOVgIhF12efQTxIggOtIYc9jb/M97PgVZJDMwXtOHwTM6xt2OlTUz+gnfEkos+jDUOmUIeRVSgFjS0i1JZxmPbA/SRrGGyW9yYcsx4CA1JM/JowC8NxsdMa92H9lK4+rOE7TYEeXq1w7HofDl9bWV3x/gz8WPdP/KM40+wk5vGVKoSRcJHK5hZD1rJnZM3thLjceHmr2Xy/S/28cM/5AOweIWe19eePDV3KsjMqyXDXMLu9Q8SCozRNlLpmLvsa2QX1pNdcB+bX/p2Ujtzbg2FFefgGGri0PbHk4yETK6kbsltlM+8hPLai1PajmLOsq9yZMdTjPQnP2+1Z36WrIJZzFpyO40fPIO1Zw+aaXnkXr8UTVkOvqZeen73EoVfugSFQYOgUjDw+NsMrd2MpjxZsLD07muJuMen1x6vqFyVZj4xolRp5uOJJp638XIExqJ1Yz+/mvssWRVGqlcUUjgnC2OBDo1Rhd8ZwtHtoWe3pCLqHphcGG7eeZnMOy+Tna8PUzxdx8VfLEYQ4I9faWDP21JM8eYfS0SI717wAUNdAc6+Jpdbf17NLT+t4sn/bZkwMBwjyh4xvSBf0YyV9DasT3IBZRXVs3vdL9BqM/H7pd9bdtYMMoxFtLenxh5ONU47IxDyuzBlTcNtT2h9Z1hKQBSJhIPx/TKZQlLiE0UUSi3RyORBo1EYTEVkZJXhdfYhV2jwufrplw9SmHs2LlsniGJ8f4aljN4WaeAeNUoFFWfhdfYxoA0gV4iE3RoKTVJbtdbESP8hsgpmMdJ//KyeieBpOkzhdZ9FUCixvvUSYjRK7qorCfT1fGiqnGIoJCVLHc3+Veak4btPglGuPEDU440bM7VJTTQYRRAEToSl1t8V5s57ciitUPHt+/Nob5r6DPNUoLf1vSQDABAJ+eg4so4ZC25M+50UVy1HjEVp2rM2ZZUQi4Zp3rOWBec4Z0KdAAAgAElEQVTdPeH3ae3Zm2IAAHqaN5BVILkhMszFWHv2EGgfZPiFrZjPnU3fX1/HuHg6Ubefvr+8hirPTMEXVtH5038l9aOrLaHr/ufQ15eTc/XitNcwlbyAsXBGh6eUGzARRtpcjLS5uOZyPX9/zUuaUhKYTbIp5Tk8cldTPGegdomZb/2tjpWfyY8bAe1RtWCHVbrPPW/bEO9LSFH3kkoXB/CKHoboiccYj4XfJbHZfM7EituUKxXeKSk+m6bmlye99lON084IKFRaRFFEl5GH3liA3lTIYNdOzNnVmBQqImE/oihSVLWchp1/R28qIBzyYsqqwNo7sR92FNnFc/C5BjCYSxjo2Mqss76IbeAIPc0S7bS87pL4/nSIhgMYzCXIFWq6G9+msHIpfa0S1U2lMWHKqkA4BRHJsLORrHNrGXn3CD3/fBQA14G38DQmfPatv7l3yv2ZZ+ZjmJZFNBDGvq+P3HMqCAx7GNrcRt7SSvwDLsyzCuj6T3K900BbB7q6Wun+CideiqfDWKG5sUwfQRAY2NUXd1MdLx751QizztDQfChIV2uIgx+cWBGhE4V9KD1zyzZwGFGMxeWCRyGTKzFlVeAcaUsxHqMIeEdw2ToxZpUjyORp3UnjxRt8Y1wKCpU+7THqwiyC3dJxoUEHqtxUho4qz4zvSHeSa+hkYQ13UayaTk8o8ZmVqBMyJDnZcu74LyOZZhkbNgXYtTdIR1eEu75q4uGn3PzgLjP/WCuJud35X0aqpinYvC3I8rM1GDNkbP8gwGtv+vnK7UZ+9mtHUn9//pubQ0cSRqu7wZuUNHZkq4OGHU7Kjg7wkLDBkdAoeyeC0xoiu0iKOxyZgOE3EWx9kvG2diXyI8z5NRgMBWRmVlFbex3Dw0cQY1FMpjLmz/8i7e3vYLe3UllxIRptJh0dG/B6Jy9gNVWcdkZgsPuDOG2qaXfCF+ka6ZBeHJX0i8XCxGIR3PZuPI7e45Jm9Tr7USg1uGwdZBXU0920HplMTlHVMlwj7Un7CyvORm8qRIxF0ZskoyRXqHHZOjBmlsf7HG1rHzxC7aLP0bDj1JWL01floS3NYuS9RjSFFjyN/WQtr0VTYEKVa6T7iU0U3bAEuVaJr3OYgRfSJ+DoSy1EgxHC7iCBYQ8ypQyZUo55Zj6CQkb+yho87akU20BrW8IIFOSjyLTEi9JPBlV+fpLEQqAt4R5TWzTkzstn319PLPvyj8+WsOkND2/+x4V9eGraMqcSAU/6LO5YNEzQZ0ejT1416TLyEGRyPI6Jk6u8rj6MWeXoDLl4XakMF68rfSwpGkkYQdmYokJiJIZMIwVjgz3DaKdLsuSqPDOhoVRjFLY64/ungsyza9BNy5EKB3mD+Nqt2DanGshsZXGSEchUFNIdlPI/rMNRHn7CzdmL1BQXKTh8NHu5pkpJplnGg39y0j8ofceHGsM8+GcXkYjI7Z/N4NavJgb0Z1/0pvR3+Spd3AjEoiIjfaleA3t/kBmTSEj4nBGMWalClCeLlp3/QhRj2OytNDW9BEjuoGgkSHP7q5SXryAWCyOXqzl0aA2z629i/4GnT9n5TzsjMGlq7NH9/R3bxmxKNQDVc/X8ZG0tN1SnsgSsPXvieiweeyJeMLrNbe+Ov276IGGIRl/7XANJbftaE6qP2oxc7IMNxMYp03e80JXnoCvPofvJ90AEVa7kX1flZOBpHMD9n12Y5pXjPtJLLBBGrlOP21fEG0JfZsHdOoy+1EJGVQ5dLx5g/s8uY/f3X0GQCSgNqe29e/ZiuexiaXUjCGQsOnNCRdKxMCw5M/FGFPHtTyhc9m7qwtZw4i6Cr9/Qw7wlWm7+aiZyucCOjV62vP3h1fpNgigSjY7vEgmHfClGQHk0kBsJTXyN4aDn6PHpZ/Ph0PGVegx0DaHMyqD029fRdf+zGOZVUnr3tfGYQOEXL0JbXUjeTefi2d2K/Z19lN59LaFBx6SrtLwr5jPtKxekbO96bCN9a7clxXpkyBEQ4rRpBQnq8aevNZCXK6exJUxujohCDgqFgFIp0NEV4Vf3ZvLGO37e3uhPGiN6+9P/zsb2NzZc5nFE0lJEs4rURCPSOKIzJoZFmSwh1jqe9PzxwJhdgWs42ZU03gTW6x0kEgmgkKvR6XIwm8upq7sBr/fUBpFPPyMwVZxkpnO6D37stolWFhO19buH8LvHV2C87/laOhv8/PV7HVO6Tl+HlWC/g5LPLsX61kGMs0vwtR8VJbN7iQUjeBr7qfnBVXibB3HsHF8S2rq9A2+PA2+XHTEa48DPpcD3rv+RhKr630mfUh+x2en9xa8p/t7/AGC+6AL082bT/4eHJAnpNFCYzUkCcmI0St+Dvyc8LM2eZQoZYV8Y7UlU6VlxmYGlqwx4XDFeW+vi4C4/v366iG/dNDUZg4mgVKcfgOMQBBRKLZFw+uBpugE8HPQe7duQsi/53NL+cCi9pEQ6F9FEEMNR2n+YoLn2/TVZGqXv4XXwcHKbrvuTVS+PhXF2CTN/9Rmi/hDbL/0VYiTxmxAUMhY8eyelty2n4ftrceySBr3d3jdRCRq0sgz8MQ8feBMTiWee86BSCoTCIq8DSqVANCry+a9Iz/p377UTiUi/+f++awS1SiAC/OBnySvSxpZwan9vJYzmY3c38Y3H6nis8Wz2rrdhylExrV76vN9+qp/HGs+OH+t3Rzn/lkLWPdrLrKUW8qdpObLNyYwaJd29Eck4CJBpkbF4oZrX3vTj9088LpXPuZz2vS+mfIceezc6bTazZn2GgX7J1TQ2x6i//wM0GjN6fR4+/6mlAH9yjcAnFNPq9HQ2TE3UzLmnI/56NA7Q8H2J9TRatg+g8FOLafzx80Tcfiq/eQmOXemrKsVC0bTunqkgPJjsg1Tm5VH0nW/R89NfpiRzGZefg+WiVch0iaWz/ZXXkyqNxSIxyldVYio3n7A7yJwl51ffGcQ9JhC47tnjYwfJlRoiaWbWOkPepG21hpwkAkO8T4UqXkN2LLzuAWLRMHpT+ipxozAc3e8bJ1/go0DGtCzcEzwr+VctAKD9d28kGQCQ3E9tD75O9fevJO+yuXEjABASA4SiCbeVwmTCtGwZtjfeIKbTIQsGJa0onR4hEECmVhPzBxA1ahgz4QiGJp8EhsKpxxzc7OA/v+3kqjvKmLsy4aZ8+6l+nvlZG6Uz9ehNCt59ZgBzrorrvlWOJU/Fkisl9tTuN0coyJczp17J4FCMinIF+w6E0OsErrtSx9/XTLzK6z78FoXVy1JqgDe8/zh79/0tadvwiOQq27f/SYAPjSn0f0bgI8Y4isMnheG3D1JwzULEaIyBFycfUIuMsxjxdRCOSoUw1HI94VgAuUwlxVrEGHKZilA0+YF2btiYpOsjNxgove+eRFEZBOQZhrQVx5wbUqmxzjY7nt4Tl+Ndv2U6ipwwykgrprJZDB/ewlsvuDGX1xP02DDkTcM30ovWko/fPoB3INU4ag05uG2pshRZBXWTnj8zvzatEcjMr0sJCoM0g7cPNZKZPxO11kzQn5rXotVnk5FZGj/+VKPujqX4B9wo9Co8nXYcRwYpXFlN6zO7qbl1EXK1gpG9vWTNLUSuUdK3voWRPanyCxkzi4gFwoy8l6rpBGDb3EjUH8IwY2IigaBSE+ofIOOMBQR7e4gNDmI+dwWKTAthm42Y14cYi+E7PDk/f6p45S89fPDmCOfdVIDbFmHvehudh6RV1y9vTLgrMzKVnHNdLud/VrqHrsNeNj07SGGejMJ8NecsUdPcGuaDvSFqqpRTYjnb+w9j709P1f648IkyAiqNjLMuzWThhWbmLjcRDooMdgXY+aaDlx8dIOhPddPoTXI+9fUiFpxvxpilZKQ/xF2XHEpbY1StlXHp5/NYfEkmeaVqYlGRh7/fydbXklkSFfV67nu+lr72AN+8MJkGqlTL+PvB+QDxeETtwgwuvTWP8lrJJ7xidTYrVidok//5cz//+k0vAjJEjr/2qLdlEG/L1NkCaoWBHH0VgiAjHPUTEyMYVNmEon763YfRqywUm+ZweCg5T8L2wstEnS5JmO4ofUKQyY4O+uNXaXO8tT6t+67i4ircPS6GD06t2PixiEXCRIM+wl4nsqOOX31uGYJMjqViHgF7P7rsEqwH3yO3fllaI1BcdS5HdjyZtM1gLiF/2pJJz18w7WyGuncnZfgqVDrKZkjyJenchqM0zup513N429+SYkcyuZLqeas54cSJKaBnXQOWunzkWiXaXAPudhuGMgs5i8rw9jjoWScN6tFgBPuBfmZ9Y3laI6DI0BKyuhCj6Z9XMSYScfhQ5RjT7h9FzOcl6nEj0+sJdnWhzMkl4nAQ6u9H0KiJutxxOfFTif5WP0/fk57mOQq3LcxPrtnHDd+voKfBy1tP9hEOxujsitHZFZHiBUdv/5lnP6JY1IeAT5QRWH51FrfdK2XxHd7uRqOXU16rpWyGjrolGdzzmVRGwo//OYPcEjXth3wMdgepmmPg7oer+PmtzUm1hE3ZSv73yRpKarR4XVFa9npRagTu/F0F9WcbeeR/O044DKFQCrjtEQ6872LF6mz62gM07kr4e9sOSg9Qobaa4WAPETGIXFASjgVRCEpUci3BqBe5oEIhKPHH3HExrhOFUqYhHAvgDY2Qq6/CF3YSjHpQKwxYtMVEY+mzbZ0bNuJvbiHrqsvRVFelPWYUwY5ObC++ksQIGgt3jxv/yNT1/o+FymDBOdKHxpyLNqsIXXYx+QtW0f7G30AmQ67S4B3sSNs2HPKiVOnJKqhj1tlfZKhrF9FIEHNONXllZxIJ+ZDJx5eijkYCCDIZc5Z9lf7293GNdKDRZ1FUtRyNTtKD72vbknrPR8kE5pwq5q34Bv3tW/G5BtCbCiiYdlY8mNzbklob+FQgFo4RDUSOkuxEBIWAoJCh1KsIORNumuCIj2gwMq5WT8QTQGHWIciEtMFjQSagMOuIeJJpu3WGZRSpa3hzRKI8R71efA2J1UTYOkTYOhRnAU6GVVlfiL/+wLWO4fCpLb5kHwzxlzvSr3Ymkt42KrI5I+MiDnrfwxpKXS2eTvhEGYH3XhhBZ5Sz9VU7Qz0Szat0upZ71sygdmH6TNZQIMZXl+/HbZdmXDlFav7wbj0X3pjDuqcSM9Av/byckhot779i46/f64ivKn758kxWXp9NZ4OPN/5+YjPWA++7OPC+5KtesTqbxl2etIFhjcxArrocZ3iQYm0tI6EeRkI9GBU56NSVhGIB5IKCTt+BlLbHgzbbtiSWhjtoTQpCeUMT88NDPb30//Eh1CXFZF5zFQqzEXlGBmIsRszjwbPzA3yHGwh2TvzwNz1/5KTuw9XTgKmsjsG979D57jMAtL4mRTjtLbuTKnIdW3C9cdc/mbnoc8jkSszZVZizEwYtEvJxZMeTlM28eNxzR8IBWvY+x4wzb6akJlWUcLjvAB2HX0vbtvPIOkpnXIjWkENF/RXJO0WRnpZ36TicWjf6VMN+cIDqzy4k7AowuLWD+m+di2VmHo6GIXx9E8dWPI39WBZVYjmrJi0d1HJ2DXKtCtfeVFfblDDFGddmx1ryVOVU6xae2Hk+ZAinv0anNBv4uP+Q1r4n/HfVlwrENc0LkrZVz9WLa5oXiIIs9fhnmhaIa5oXiBkWRXzbmuYF4n/9vDxt/79eN0tc07xAnHlmhgiIFfVS3w++OSvlWKVaJq5pXpByPUnnuS/9eabyV6qbJSplmuNup8krFjOq6k/qcx7tZ/p/33NK+lLoM066j4/jr3bRLeLZV/zipPvJu3y1WHPvgx/7/ZzoX9Xdl4mL3/i2uOC5O8W6B28UZ/xstVj34I3igue+Li5+49ti+ZfOS2lTZ1gmXph12ym9jjzVNHFV1hfEbGXJx/6ZfNR/p2L8/UStBAByi9UsvzaLc67IQm+So1LLUKrHt7bpmJ5uWwRjloLcEnV8hQDQ15o+47Sv1U9RpYbiai2Hd5x4IPNUoMt3YlIUgcEeAoMnr68eGOyh8c8/Oul+ZCoNcq2BiPfj/Tw/bGQuXYlrz04inv/37rP1gVcJDjgpuvEsMuqSy7R2Prye/ufSq9rGxBgZiixm6JZgkFsYCLXS5NtBVJR+izP151CiqeWNkUfibYyKHJaYruKQZxM9wfTumfGglWWwyHQFalmyIu5o/wIyitTV5KsryVQWEIz5GQp10OTbSVRMuEXnZpwPwAHPuywzfxqFoMQXc7HH/Ra+qJRgV2dYRrF6erzNAc8G+oLJAokCMs4wXoRBbkEl08TPd8SbUBCeqT+HDEUWETGERZFPlAjO8BANvm3xc50qfKKMwIrrsrnt3jIUSoENa4exDYbwe6LULTYy79yJs/3GIhiIAgrU2mTjkS6wDBA4ul2j/wQs7T4hMJTVELR/fBTIjwpZ512Ct/HI/5NGQIyJdD+1CX/PCNqyHOQ6lZQx3DY0LmsIpOIrZ2RcRH+wBV/USammDrVMx17326f8GmWCnAXGizno2UhIDFKorqJMM4tmX8JAicQo1tTij7k56HmPTGUhpZo6QOCINzmuo5bpmJdxIc3+nciQkaUsIhBLxPcavVvp8O8jS1lErf5s0kEkRlgM0u7fR1gMxs831ggAZMgtDIY6OeLdgkZmoFw7mzMyVrHJ8e9T9wHxCTICuSVqbv9JGXKFwF+/28GGZxMJEzqj4riMgForMUmOHfSPNQqj0Oik4/2eyYOxmnH6OJXQ5BZRcdPXafvH7yi54nP0v/lvBKWawgtXEwsF6HnlafwDkj++cNWnsNQvAqD3tX/gOJxMIS28YDWa3EJ6X3+G/JVXoSuqwNvVzMC7LxE6ZpCuu+vB+Ot0fQHItXoqb/oGCoORaDBAyG7FcXAH9gPbAchbdhnG6npU5uwUkbTDD94VryUsyOXkLDofU90ClBlmbLs3M7TldWLhRJZuyRWfA0R6X3+GvOVXYKyZTdTnpuvFJ1Ku/ePCqdCQ+qhwxa05OG0RNr5g5xdrq/jO6hZuuquA/FIVGq2Mn32xnTt/VYpSJWDKVvDQD3vpaQlw/qwR8ks9HN7l5c01I3zhR0Xk3jSNZ/8ySOOe1BwMmSCn1beb7oAUE4oRo1QzE6MiC1fkxPJYxoNRno1ObmI4LK2CXREr+aoKMhTJ2dzbnAmp+b5gM1qZgTxVeYoRMCvyaPfvpScgGbmuQDLdMyKGiUSdKauOY7HPneD8j57vWMgFJQc8G8b0HWKGfnLW2vHiE2ME5i4zIVcItOz3JhkAgJwi1TitpIpDY1lAAMZM6baHupM1RIqq0lccKqqUtvcedRfFjmYuqlSpP/DsCa7lRDA2uJm0XSanYMVVDO94h4ILriMaDDC0+XWyz1xJ/ooraX/mDwAMbHiBkZ0b0JdWj3sOdXY+Zdd/GW9XC/3vPE/Byqspu+Z2Wh6/P4mr3vK3X6Avrabg/GvH7av0ys9h2/c+YbcDhd6IvrQKhSFhoJ2Ne/G0N2CsmY1/sIewMxGETrBMBEqu+Bz60mpsezYTHBmg8ILr0eQV0fHvvzA2aKgwmCi96laiQT9Dm18jo6KWsOujLdSdDtkXXIZhZj0AZV/9n6R9TT/8ZuJNLIYqJ4/S//oGYiRMoLsD67qXCI0kjJhcpydr5UUYauuR6/SMvPM6tvffTaKnyHV6slasQj99JgqDkVgwwPBbr+LcvT3p3FkrVmGcuwCF0UzU68Z9cB/WdVLG+PrnbHzl5yVsfMHOtjedzJivR6uX8cAdnRSWqxFF+O1d0uRi8YUmlqwysbYlwMYXHfR3Sr8lQYD6JQbuuGjisqhDoUTAuD/YQqlmJpnKolNuBJSy1N/jVKr9uaM2MpWFSQSKUXQETo6YMd750p1rLJyRD2di84kxAtZe6SHLK1GTYVHgtkfQ6uV84adlnHVZ5rjtfvHiTO77fBMOq+TbyzmqAvj4vV1J8YAtr9g499ps1BoZD303mR1UWKHh6V/2cHi7tKTvOOJjqDtIbomaz/2glCd/1oUYk/IB7n5kYtokwJmrLDz7hz5G+pO1ZwpKF+Nx9eLzDJGVW4tSnYFcriQc8hHwjSCKIo6RhH/Ruv1tPO0NFF6wmpYn7ic4PIAgkyUN0rFQkKBtCIXeiDIj/WpJplTT9vRvCY5IuQYhu5Vpn/4aphnzcBxOaC+N9jMR5LoMQo5h3M0HEcUYI7veTdo/GpfQ5BbiH+gmOJwqkFZ82Y3oS6tp+P33EnIcA91Uff7b5K+4koH1iVmbrrCcxj//kIhPWpLb929L6e/jwPBbrzD81ivU3PsgnX/8FcGh1PsEQCbDtGAJLT/9DgCWJcsov/O7dD/2R/ydbWStWEXWilV0/+1PDL0iSTlkLj2Pmh8/QM9Tf8XXIg22ld++F9t7b9P+4E/HvSbDzNkEB/tp/83P4tvMi5dimDELT8NBPM4oLz1m5aIbs3jhESsz5uvR6KSJTl9HkOVXWigoU7Hm94OYcxSo1NJKbtQAgGSf77iokYtuzEKrk/OfR9Iz6oKxxAph1J2ikY0v1SE7QXkRa6ib9x3PcWHWbcTEGL6ok2bfTvqCzfFjspUlzDdeiCsywmHvZsJiELkwOjQm52yExQCh2Mmp1WYrS6jSnUFX4CCeqGPM+SbOD4mdQA7RVPCJMQL7N7nobPBRNkPHr9fNonW/l6o5ehQqgWf/0Md1X0ufmShXCPxhQz2tB3zEYiLVcw0cfN/F2/9MtqqP/bCTvBI1Sy7NZPZSEx2HfChUAmUzdGx+aYRX/5ZccWvNg73c8ZsKLvpsLgvON+P3RCmp0fLuc8PMWWrCkpueY96810v1XD2/XjeLtgNeolGRba/beWeNlWg0iNvRjVafg86QSyjoJhDyEA568PtGMGdVwZiJ0ljXSPz1CSYzjJ09i1HJOAry4388ul98nKrPf5uI14Xj4E5Gdm8i4j0+KQeVORuZUsXMbz2Qsk+uOabcZSgYNwATobpoJXpNLt7AEM2964/rekYxvfhCuq27OLL9yckPPg44d22Nvw70Sjx3pTkTf2cbhpn1hKyD+DsSMiGOnVvIvuBSMurmxI1AaMSKcf4iAv29eBoOpiWxZ9TNpv+5fyZt87U2YVqwRGoDHPnAyxW35bDuHyM07PYyd2kGd/+xHIDHf97HxTdlkV2oIhyM4XGmukeNFgV3PiBJsD9+3/iV8zQyPYGY9+hryRUy+n40YVKGLD7wadK4S6aKfHUlG2xPExbT1xwp19YTE2Pscr1K5GggWM74OSIni3JtfdK5PuzzTYZPjBGIRkXuvbGR1XcWMe9cExWzdBzc6mLtb/tw2sJc+9X0RuCHnzrC9XcWsfBCM8ZMJbaBEL/8YgvRY1xEPneUez7TwMW35HHOlVnUzNcTCYv86a52Nr80kjK2vv+KjaAvxuVfyKd8pg6/J8qTP+1m3d8H+f7jNeMagV/c3sQN3yzmjJUmpi8wEArE4vkHQ717APB7rXQ0vUlh2RLs1sa4auSA/xi2xUmK6I3FWINyMgiODNLx7z9jmb2YrAXnkjl/KT2vPIW79ThS5QUZEZ+H/rdTRcyOdfWMGqzJkGWsYtuRhyc/cAI09oxfD/dkEHakMcAK6aeptGQlGQCQ6jxH/T6UmYms875nHif/mk9TeMPniLhduPbsZPjtV5PaKTOzqflxqmF17Uus9uRyAZ0h4eZc87vkyc93Vk9QChRw2SP85LZ2SlbfTk/ro+Mel6eaRmdAMjyFamn1PBKWtKX8UWnFbVTk4IhIq9N8deWE550IWcoi2v3j1xoRkBERQ/FBWSloyFJOrO90MpDOlzAAH/b5JsMnxggAeF1RnvhJF0/8JHXfp2t2MWvGpzjYIFVJat7rjcs2PH5vF4/fm5y4lJ01A4Mul47uRBKRQVvOS4+089IjA0nHlRXXJR03ig/WO/hgvQNTRglOdyJT8ae3pFfjBPA6ozz2o04emwLLsq9za/KGUzjof5jwdrXg7WpBaXyV8uu/TMHKa1KNwAS3EnIMo8kpxN16aMqD/ESoLb0UrcrMrPKrsLnb6RvZx+yK65AJCpp63sQXtDGv6jOEI34cnk56hndTXXQeWrWFtv738PiHKM9bQnHOAva2/guPf4hZ5VchCAJZxkqsjiaGHA3kZ85CqzLR0vcuNnf7lK9PnNQAp3OFJG8LWQfp+utv0U2rwrRgMZazz8Xf3Y63ccznLsjo/1fqKmbUCC2/0sLKay2s+8ep9csfi4gYokI7D608AxlySjS1DIbacR+NBwyE2qnSLWB2xko6/PuJEcUgt6T0IxPk6GUm9HJJVsIgNxOMefHGnEkZ9T2BI5yX+TlAigcEYz4GQm00eiXX4Ui4h0xlAbX6s3BHbZRrZhMUfahIHyOcCBqZAaWgil+vTm5CK8sgJPrjFNiRcA+1+rOwhrrRyPXx831cOI2MgEDhymtRGowMvPcy+csup/Olv1F9010M795INBTEPGMeYjSCMiOTtn//IU0fUx8kh0ca4ip9o6goP58P9j0y6XH/h/FwjP/UZcfX245pxryUIyN+L0p9RtqYgKtxH6bpc8mcd05KTOFEdHWOdL2KSV/EwQ4plpBrnsH+tmfRqs3MKL6IPa1r0KktbGmRXCVmQwlymYr9bc8yt/IG9rauoWNwKwZtQllUqdCyp+UZKguW4wlIrsUD7c9j0OZSUbDsuIzARAjbhlFmJjNZZBotcq2WsC1VUtjX3oKvvQWl+VWKb/0K7WOMQNg2jKfxEGIkvWHd+KKdjS8eXZUIAoWX3gCCDH3FdDzNhxCjUeRaHYJCwdD6lwnZhslfdS2KDOPR91YKLvkUMtX4NS0ARsJ9tPp3S3kCCgtdgcM0+RIB7EDMw273Oqp1C6nWLUQkxmbHWpabP53UT56qnNmGlfH30/VSKcyDno30BqWJWLF6OtP1i9nnfgcREZkgxyC3ME07J24E2v37UQhqCukX1J0AAA0GSURBVNSVZInFdAYO4InYOdN0+YT3kQ7LLcnXWKmdT6V2Po2+7XT498fPt8xyg0RLjbrj5/u4cNoYgZwFK/D1teFo2E31zXfhbjuCZdYirLvWk1ExE0fDboK2QQbfX4fSkF5QyqDPj9cdXjDvSxxufJaqaRcxYmuipz+ZJZGfOxeDPpeWdmmJLwgyNOrUwOmxxwFkGApwe/qTovkymYJYLMIZs2+noeUlFEtmIs+04NmyjajbjXHFcmR6HSPPrEVVXIimuhLXhk1op1cT9flQ5uURaGyKH+feuBntrFoUFgve3fsINE+8DE8HfVkN5au/lLSt6JIbARjc+DLDOzekazalvoouuZGiS25M6kehN1Bw3jVkVNUjRiOEnTYcRz7gyO+/l9Kf88gHVN78TUoycwGR4PAgbf/4LQCupn0c+vW3yJp3DpW33IXakkvIYcXd3oD1/TdO2nWVjm11rFaSXC6xSva2rkk5FqQlvUymoLVfUkfNMdUAEIlKaqzxc4XDFHzqs9i3vEssEkau1eHYnr4IeTp0PfJ7Sm+/g6rv/xz71o2E7SPkX3UD7kP7GHwxwRcv+8r/4G08TNg2jBiNoi4sxt+ZLJDWv/bv1Pz4AVz7duHvaANBQJmVjWPbZiKuYxRNRZCpNUT9Pvy9HQy9+yr6aTW4Dkla9xW33YXz0G58PW24Du2m4ra7GNm+gZBtiJFtGyhZfXva+znkSayoGwt2kL2wDPu+XkrrZqPO1CHXKGl+bBs5n6nEKdg4+MomjFU5hNb7ab14P4MvdzDj9qXItUo87SN05h1BrlHSv6EZ2zFCd3JBSZ1hGS2+DxgIJT4LhaCiRFM75lZjNPm2JxkiIClZDYjnMSiMWnJWzSEWjhK2efA29RMccFBw/RIO6ZoRFDJG1h8kOOik6LPLGH7rAEImzPzKLdi3NeM+0EXLvG4CvTZGNhxCYdRScNMS/OvC6CpyUReY8eYY2LrpzaQYoCtiTbmmU4HTxggEbYNoC8pQmTIJOe34h3qw1C+i7+1nMZQcpTdO4g7x+YfjP3CvdxCtRmINOVwnqF8yDkoKl6DRWOjq2cywTQrMjapBhsJeFHJpJmR/4WWyVl/D8D//jXvTFtSVFWn708+djf2VdSCK8eN09XUEOzpxbdhE1vXXJBkBpTeG6+l/ofJGMWbPpvevv0Un6tDnTiPW6+HQAxIFMdI/gPPpNfQM7MBoKCISCZKfXU8w7Cbik+IQfW+tpe+ttUnX4x/ojvcxCm9nE51/fYDi8nPo6diMWmNixCrxvEvKl9Hd8Z6U/bu/ncMvJbscZp5pIBIWEUUordHSccSHOUcJvY9hCigwmBXY3GECFRr0Rjm5JSq0ejndzXuwrtvGwvPNHNjqZs6SDNrrlOSW6NHq5by95okT+fqwOpuYXXEdckFBY+9bKfsdnm6yjJXMqVjNsLOZIWcjlQXnYjaUUClbzoirFRCZVX4VMkGOx2/F6U2fjd235gmyz7+Y3EuvRhRFQkODx2UExHCY7sf/RPbKizGdsRi5Ts/wO69j35wc3A4ND2GcuwC5IQMxEiHisNH50IPHdCYy9PoLmOYvImPWvKOG2s7IhnSxDhFBrmDgzecRI5KBVGfnA1LQOuS0ExwZRFtYFn8fdtrRlUzdd+9qHMLdMowYjWGuy8e6vRPHwX6m3biA7hcP4B90U/etFXi7pFmyvtSCZVYBjkP9RP1hFHo1ng4bjoP9zPzGuSlGICqGGQ53U66txxkZQibI0clNFKtnID+JoS/rvHqGXttD+dcuwts8gL9LWpFpSrIkg9Bvp+BTZ9Hz+LvI9Wp8LZJ72ddhZWDtNsRojIjLj2WJNHHIu3IBQ6/spuCGswh0j+Bt6mfwPzsp+8oqXPtO7diVDqeNEXC1HcZQPp2C5VczsOklxFiUgswrCblsU2J/AOi0OfGVgEGfP8aPPwX3gSgikykn5eoCHG56HqVCy+Iz7mTT9l+M32UkCnI5hoVnIDdmEB5MT5eTGSTmQ9JxchlRlxsxHE5JqsrLqsfrH8RoKEIuV6NSGghH/MRiYcKRhCpnMORCdpTqJooi0VgQEZHewV2UFpyFw3186oYedx8eVx8edx/mzPQGLR2yCv6/9u4mNo6zjuP493lmdnf2zfELjh07jRNK4iQloU7qtnGkUCRCRROJRCqICqmlFCEQXDhxQAKJEydu3BAScKAVtAVCCz2QFlLapFKamlRx7CRuYmxn/bZ+2d3Zl5md4TBx4pfdkBeHBs3/I1na3ZlZz8jj+c08r1FO/DHL4W+s58+/nORL32rDvTbhh1vxKearxOKaeEqzozdFJKp4+ecZDj2/nsHTecyoIp7SzE5Uli2vJ751A9YDrdiDoyR3bsKruJy5+DItT+2leCmDPTjGv4Z/D0Dr0cexX51ZVWl8afytZe/P//svsGSASrucJZu7jFKa3m1f5+J4cFEuVRY4c61YSRuKwoUBChduDJSnjRt/y4ljv2Pi2PIAroyNMfqjH1PGxsAMWseUKsy//lcmX3+17jGvLOtXhoFfXd16Z+7kCeZOnviv65mpoClwx+FnUIZBeXoCI2bReeRZlBlh8vifqGSnSW3ppu3zR6+9n6Jx92N0Hnl2cUyw21LOBiOXmpaJa1fwqx46YuB7PsrQaFMzc2aU3T/8AvMDE1x5pZ94ewPVsrvqf2RRf+44n4z38HD6IApF2beZdTL0F++8d7JhRfCKlaBfi++jtEYZwY9nV/AqLldfepdyZo6xX/2DdXu2MP/+R3UvQzoWoVqsoM2gU6ozW8CruFBnBNe1dt+EAPiMH39l2Sfnf/ETADL/DFo55IaD8k0nv3oyDoCCPcmnt38FK9bIdHaw7jRsD3U/TTKxHsOIYcUaGb5yHLs4zeTUWXp7vkOxNMvZgd+ilGZTZ9+y9YrFGXp2PQ9KrSpiWqnly0ex+8+iTBOztQUVjeJMTpF6tBeztQUnMwmeR/6dUzQeehJnPHN9PW4yt2vezmAaFnO5ERrTXUBQDJGMt5KzMyQT69HKwPNc0sl20skOlNI0Nmy+6by4t8NxbNo69pJfGCWZbieV7sD3qyTT7XW3mZ1yOHCkmeyEg9ZBL/C5aef6HK7b96bwqj4l+8axdz5osXlHMENZYaG6anlNno+RsvCKDipiorXCSMRwZnIkH9qEPXj30092te2jo+UzmIbFlYl3a67T/dRmht8aI9FisTCWJ92RZMPuTzBwrH59QZvaRIQos/4kKdWIi0OKdcRJMuR/gEvtIb61ZaGsGF7BDmZ0Uwq/XMFoSINW6Hgc5+oEXrmM2dxEdWEBHbOCm4251WPRNPXsY+bUm9hXLqK0putr3+Xyb4J6OG1Gg7oBw2Dmnb+R3Pgg7sI8ZiLNzMnjGLEE1VIBbUbQsTieU0ZHYyhtrGrd1f3t/WT+vryoc/S1c2z95j6qRYfMmxeozJf41HOP4pYczHiEaGOCWEuSpl0dlKZufoPo+pWaRT0rKcMg0tQMSuEuzAf1JkphJJKgNe6SFlyzb59nw1f78D2P/MAYHc/spzgyjVd2SO/eRDQzR+HCVeJeK037uymcD5rK2hev8sALnyP79iBNfduId7VSvDzF9Bv9bHzus2RPnMfaWL/P072i7iSx13wnlPr4d+IeUFovGwah1h3Xqm1udb0VPYm3bHyC6dlBWhq3cnns3oxFX2MnbrvFktK1B/Vby20T2zqIdjQHYZC0gjvKeJRqvoSZtsi9P4wyNb7r0fp0H9N/OElx+NYn5blVvS/spP/FIbYc6ESbGqshimkZ9L84RKVQu3K2XXURIQIoFvwsDaoZFwcXh2l/vO5TasPBJ/CLJTAM/HKZ4ocD+K5LfNdOqrkC+D6VKyMk9jxMZSR4pEntf4zsS7WfLqy2TloPfJGqXUBbFvMfniY3GFRsNu/uozg5Sqqrm2hDM/mRIcrZSZp3Pc7CpbPg+5iJNIaVwHPKmKl1VIs2biEXLF9CRww8p8b5rkCpJXMVXGsPsP17B7j06/dwciV2/eAgZ3+6ujjvTjTs6UXHE1TzOZRh4JVKRNvaiTQ2Uxg8R/7cil7CCrZ8/xAf/ey14Fyqetfv9BfPreC1EZQILG4WMfDrHO9ttncAwPf9u35ckBAQ4n9gx+HNRBIRht4YoTRfu9PS3Ug+0kPh9AdBKNcK56Wf6aDIdE2aHF//3iVXsaW/q97r+0xDzyOoaIz5UysmAlosZrpP91tCQAghQmwtQuD/Z4hDIYQQa+6+eBIQQgjx8ZAnASGECDEJASGECDEJASGECDEJASGECDEJASGECDEJASGECDEJASGECDEJASGECDEJASGECDEJASGECDEJASGECDEJASGECDEJASGECDEJASGECDEJASGECDEJASGECDEJASGECDEJASGECDEJASGECDEJASGECDEJASGECDEJASGECDEJASGECLH/AHsZUHqPrbcCAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Display your wordcloud image\n",
    "\n",
    "\n",
    "myimage = calculate_frequencies(file_contents)\n",
    "plt.imshow(myimage, interpolation = 'nearest')\n",
    "plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If your word cloud image did not appear, go back and rework your `calculate_frequencies` function until you get the desired output.  Definitely check that you passed your frequecy count dictionary into the `generate_from_frequencies` function of `wordcloud`. Once you have correctly displayed your word cloud image, you are all done with this project. Nice work!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "coursera": {
   "course_slug": "python-crash-course",
   "graded_item_id": "Z5d28",
   "launcher_item_id": "eSjyd"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {},
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
